<?php

namespace Ams\AdresseBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\DBALException;

/**
 * ReparSocRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReparSocRepository extends EntityRepository {

    
    
        
    /**
     * Récupère la liste des exceptions en fonction du depot
     * @param int $depotId L'ID du dépot
     * @return mixed Le tableau d'enregistrements
     */
    public function getRepartitionByDepot($depotId) {
        $connection = $this->getEntityManager()->getConnection();  
        $q = "
            SELECT 
                rs.date_debut date_debut,
                rs.date_fin date_fin,
                s.libelle societe, 
                c.libelle ville,
                c.insee insee,
                c.cp,
                if(rs.flux_id=1, 'Nuit', 'Jour') as flux
            FROM repar_soc rs 
            INNER JOIN societe s ON rs.societe_id = s.id
            INNER JOIN commune c ON rs.commune_id =  c.id
                   
            WHERE depot_id = $depotId ORDER BY  rs.date_fin desc
          
        ;";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }
    
 
     /**
     * Retourne la liste des insee pour un département donné
     * @param int $iDpt Le code du département
     */
    public function getInseesDispo($iDpt) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "SELECT *, c.id as commune_id FROM commune AS c
	WHERE LEFT(c.cp,2) = $iDpt
	ORDER BY insee ASC";

        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }
    
    
    
     /**
     * mettre une date de fin a une exception
     * @param int $socId l'ID de la societe
     * @param int $communeId L'ID de la commune
     * @return mixed Le tableau d'enregistrements
     */
    public function UpdateExceptions($socId, $listInsee, $date_fin, $userId) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "  
            UPDATE 
                repar_soc set date_fin = '".$date_fin."', 
                date_modif = NOW(),
                utilisateur_id = $userId
            WHERE commune_id IN  (".$listInsee.")
            AND societe_id = $socId
            AND date_fin >  NOW()
        ";

       return  $connection->executeQuery($q);
        
    }

    
    /**
     * Renvoit la liste des exceptions de sociéte
     * @param string $zipCode Le numéro du département
     * @param int $socId L'ID de la sociéte
     * @param int $fluxId L'ID du flux concerne
     * @return type array La liste des enregistrements correspondants
     */
    public function getExceptions($zipCode, $socId,$depotId= 0, $fluxId = 0, $isActive=0) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "
        SELECT 
            rs.*, c.libelle as ville, c.insee, c.cp
           
        FROM
            repar_soc rs
        JOIN commune c ON c.id = rs.commune_id
       
        WHERE ";
        
        if ($depotId > 0){
            $q .= " rs.depot_id = $depotId 
                AND ";
        }
        
        if ($fluxId > 0){
            $q .= " rs.flux_id = $fluxId 
                AND ";
        }
        
        if ($isActive == 1){
            $q .= " rs.date_fin > NOW() 
                AND ";
        }
        
          
        $q .= " LEFT(c.cp,2) = $zipCode
            AND rs.societe_id = $socId
        ;";
    
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }
   
    /**
     * Insertion d'une exception societe
     * @param array $aCommuneId
     * @param int $depotId
     * @param int $socId
     * @param int $fluxId
     * @param int $userId
     * @param date $dateDebut
     * @param date $date_fin
     */
    
    public function insertExceptions($aCommuneId,$depotId,$socId,$fluxId,$userId,$dateDebut, $date_fin) { 
 
        $value = '';
        foreach($aCommuneId as $key=>$commune){
            $value.="($fluxId,$commune,$socId,$depotId,$userId, NOW(), '$dateDebut',' $date_fin')";
            if($key + 1 < count($aCommuneId))
                $value.=",";
        }
            
        if($value != ''){
            $q = "
                INSERT INTO repar_soc
                    (flux_id,commune_id,societe_id,depot_id,utilisateur_id,date_modif,date_debut,date_fin)
                VALUES
                    $value
            ";
            $this->_em->getConnection()->prepare($q)->execute();
        }
    }

    /**
     * Retourne la liste des insee pour un département donné
     * @param int $iDpt Le code du département
     */
    public function getInseesForDpt($iDpt) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "SELECT *, c.id as commune_id FROM commune AS c
	WHERE LEFT(c.cp,2) = $iDpt
	ORDER BY insee ASC";

        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }
    
    /**
     * Recuperation des communes livrant des produits/societes du JOUR a distinguer avant son integration dans JADE
     * @param string $sSocCodeExt
     * @return array
     * @throws DBALException
     */
    public function getCommuneJour($sSocCodeExt="MD,MP") {
        try {
            $aSocCodeExt    = array_map('trim', explode(",", $sSocCodeExt));
                       
            $sSlct  = " SELECT DISTINCT
                            s.code AS soc_code_ext, c.insee, d.code AS depot_code, c.insee, IFNULL(DATE_FORMAT(rs.date_debut, '%Y/%m/%d'), '2099-12-31') AS date_debut, IFNULL(DATE_FORMAT(rs.date_fin, '%Y/%m/%d'), '2099-12-31') AS date_fin
                        FROM 
                            repar_soc rs
                            INNER JOIN commune c ON rs.commune_id = c.id
                            INNER JOIN depot d ON rs.depot_id = d.id
                            INNER JOIN societe s ON rs.societe_id = s.id
                        WHERE
                            rs.flux_id = 2
                            AND (CURDATE() BETWEEN rs.date_debut AND rs.date_fin OR rs.date_debut > CURDATE()) 
                            ";
            if(empty($aSocCodeExt))
            {
                $sSlct  .= " AND 1 = 0 ";
            }
            else
            {
                $sSlct  .= " AND s.code IN ('".implode("', '", $aSocCodeExt)."') ";
            }
            $sSlct  .= " ORDER BY 
                            soc_code_ext, insee, date_debut, depot_code ";
            //echo "\r\n----------\r\n$sSlct\r\n----------\r\n";
            return $this->_em->getConnection()->executeQuery($sSlct)->fetchAll();;
        } catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
   
}
