<?php
namespace Ams\ExploitationBundle\Command;

use Symfony\Component\Console\Input\InputArgument;
//use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Ams\SilogBundle\Lib\StringLocal;
use Ams\SilogBundle\Command\GlobalCommand;
use Ams\ExploitationBundle\Entity\SuiviCron;

/**
 * "Command" pour initialiser un CRON et renvoyer son Id_AI
 *
 * @author ydieng
 */
class InitShCommand extends GlobalCommand
{
    protected $suiviCron;
    
    protected function configure()
    {
        $this->sNomCommande = 'init_sh';
        $this->setName($this->sNomCommande);
        $this->setDescription('Initialise le lancement d\'un CRON')
                ->addArgument('libelle', InputArgument::REQUIRED, 'Libelle(id_sh) du cron');
    }
    
    protected function execute(InputInterface $input, OutputInterface $output){
         parent::execute($input, $output); // Obligatoire pour tout "command". Afin d'initialiser les fichiers de logs
        
         //Récupération du libelle du CRON
        $libelle = $input->getArgument('libelle');
        
        $this->oLog->info(date("d/m/Y H:i:s : ") . "Debut Initialisation du CRON '".$libelle."' - Commande : " . $this->sNomCommande);
        
        $this->suiviCron = new SuiviCron();
        $this->suiviCron->setLibelleCron($libelle);
        $this->suiviCron->setHeureDebut(new \DateTime(date("Y-m-d H:i:s")));
        $this->suiviCron->setEtat("En cours");
        
        $this->suiviCommand->setHeureFin(new \DateTime(date("Y-m-d H:i:s")));
        $this->endTraitement();
        
        $em = $this->getContainer()->get('doctrine')->getManager();
        $em->persist($this->suiviCron);
        $em->flush();
        
        $id =$this->suiviCron->getId();
       
        $this->oLog->info(date("d/m/Y H:i:s : ") . "Fin Initialisation du CRON '".$libelle."' - Commande : " . $this->sNomCommande);
        return ($id);
    }
}
