<?php

namespace Ams\DistributionBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FranceRoutageProspectionTmpRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FranceRoutageProspectionTmpRepository extends EntityRepository
{
    
    /**
     * Par defaut, mettre a 1 la colonne "adr_ok" 
     * 
     * @param integer $qteParDefaut
     * @throws \Doctrine\DBAL\DBALException
     */
    public function initFlag()
    {
        try {
            $this->_em->getConnection()
                    ->executeQuery("UPDATE france_routage_prospection_tmp SET adr_ok = 0, chgt_adr = 0, livrable = 0 ");
            $this->_em->clear();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Mise a jour quantite si pas definie
     * 
     * @param integer $qteParDefaut
     * @throws \Doctrine\DBAL\DBALException
     */
    public function updateQuantite($qteParDefaut=1)
    {
        try {
            $this->_em->getConnection()
                    ->executeQuery("UPDATE
                                        france_routage_prospection_tmp 
                                    SET qte = ".$qteParDefaut." 
                                    WHERE 
                                        qte IS NULL ")
                    ;
            $this->_em->clear();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    
    /**
     * Suppression des abonnes dont CP ou Ville est vide
     * 
     * @throws \Doctrine\DBAL\DBALException
     */
    public function supprAbosCPVilleVide()
    {
        try {
            // Suppression des lignes dont le CP ou ville n'est pas renseigne
            $this->_em->getConnection()
                    ->executeQuery("DELETE FROM france_routage_prospection_tmp WHERE cp_ext = '' OR ville_ext = '' ")
                    ;
            $this->_em->clear();
            
            // Suppression des lignes dont le CP n'est pas sur 5 caracteres
            $this->_em->getConnection()
                    ->executeQuery("DELETE FROM france_routage_prospection_tmp WHERE LENGTH(cp_ext) <> 5 ")
                    ;
            $this->_em->clear();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    
    /**
     * Suppression des abonnes hors Ile de France
     * 
     * @param string $sDepartementIdf
     * @throws \Doctrine\DBAL\DBALException
     */
    public function supprAbosHorsIDF($sDepartementIdf)
    {
        try {
            $aDepartements  = explode(",", $sDepartementIdf);
            $aWhere = array();
            foreach($aDepartements as $sDep)
            {
                $aWhere[]   = " cp_ext NOT LIKE '".$sDep."%' ";
            }
            $this->_em->getConnection()
                    ->executeQuery("DELETE FROM france_routage_prospection_tmp WHERE (".implode(' AND ', $aWhere).") ")
                    ;
            $this->_em->clear();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Mise a jour de l'attribut societe 
     * @throws \Doctrine\DBAL\DBALException
     */
    public function updateSoc()
    {
        try {
            $this->_em->getConnection()
                    ->executeQuery("UPDATE france_routage_prospection_tmp AS t, societe s SET t.societe_id=s.id WHERE t.soc_code_ext = s.code ")
                    ;
            $this->_em->clear();
            
            // Flag KO des lignes dont la societe est inconnue
            $this->_em->getConnection()
                    ->executeQuery(" UPDATE france_routage_prospection_tmp SET type_probl = 'SOC_INCONNU' WHERE societe_id IS NULL AND type_probl IS NULL ")
                    ;
            $this->_em->clear();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Definit le type de client (abonne ou LV)
     * 
     * @param integer $clientType
     * @throws \Doctrine\DBAL\DBALException
     */
    public function updateClientType($clientType=0)
    {
        try {
            $this->_em->getConnection()
                    ->executeQuery("UPDATE
                                            france_routage_prospection_tmp 
                                    SET client_type = ".$clientType." ")
                    ;
            $this->_em->clear();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Marquage des lignes d origine
     * 
     * @throws \Doctrine\DBAL\DBALException
     */
    public function updateOrigine()
    {
        try {
            $this->_em->getConnection()
                    ->executeQuery("UPDATE france_routage_prospection_tmp SET origine = 1 ")
                    ;
            $this->_em->clear();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Suppression des "\r" et "\n" pour tous les champs
     * @throws \Doctrine\DBAL\DBALException
     */
    public function supprCaracteresSpeciaux()
    {
        try {
            $update = " UPDATE france_routage_prospection_tmp 
                        SET 
                            num_parution = REGEX_REPLACE_1('[\r\n]', '', TRIM(num_parution))
                            , numabo_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(numabo_ext))
                            , vol1_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(vol1_ext))
                            , vol2_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(vol2_ext))
                            , vol3_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(vol3_ext))
                            , vol4_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(vol4_ext))
                            , vol5_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(vol5_ext))
                            , cp_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(cp_ext))
                            , ville_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(ville_ext))
                            , qte = REGEX_REPLACE_1('[\r\n]', '', TRIM(qte))
                            , divers1 = REGEX_REPLACE_1('[\r\n]', '', TRIM(divers1))
                            , info_comp1 = REGEX_REPLACE_1('[\r\n]', '', TRIM(info_comp1))
                            , info_comp2 = REGEX_REPLACE_1('[\r\n]', '', TRIM(info_comp2))
                            , divers2 = REGEX_REPLACE_1('[\r\n]', '', TRIM(divers2))
                            , soc_code_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(soc_code_ext))
                            , prd_code_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(prd_code_ext))
                            , spr_code_ext = REGEX_REPLACE_1('[\r\n]', '', TRIM(spr_code_ext))
                        ";
            $this->_em->getConnection()->executeQuery($update);
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        } 
    }
    
    /**
     * Mise en majuscule des champs adresse
     */
    public function miseEnMajusculeAdresses()
    {
        try {
            $this->createQueryBuilder('t')->update()
                    ->set('t.vol1Ext', 'UPPER(t.vol1Ext)')
                    ->set('t.vol2Ext', 'UPPER(t.vol2Ext)')
                    ->set('t.vol3Ext', 'UPPER(t.vol3Ext)')
                    ->set('t.vol4Ext', 'UPPER(t.vol4Ext)')
                    ->set('t.vol5Ext', 'UPPER(t.vol5Ext)')
                    ->set('t.cpExt', 'UPPER(t.cpExt)')
                    ->set('t.villeExt', 'UPPER(t.villeExt)')
                    ->getQuery()->execute();
        } 
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Reorganisation des adresses a normaliser
     * 
     * @throws \Doctrine\DBAL\DBALException
     */
    public function reorganisationAdresseANormaliser()
    {
        try {
            $sSlct  = " SELECT 
                            id, vol1_ext, vol2_ext, vol3_ext, vol4_ext, vol5_ext, cp_ext, ville_ext
                        FROM
                            france_routage_prospection_tmp 
                        WHERE
                            adr_ok = 0 AND type_probl IS NULL
                        ";
            $res    = $this->_em->getConnection()->fetchAll($sSlct);
            $iI = 0;
            echo "\r\n".date("d/m/Y H:i:s")."\r\n";
            foreach($res as $aArr) {
                $iI++;
                echo ".";
                if($iI%100==0)
                {
                    echo $iI."\r\n";
                }
                $aAdrArranger   = array();
                // On met en :
                //    - volet 1 pour RNVP : volet 1 
                //    - volet 2 pour RNVP : volet 2 
                //    - volet 3 pour RNVP : volet 3 + volet 4 
                //    - volet 4 pour RNVP : volet 5 
                //    - volet 5 pour RNVP : rien 
                
                
                // Dans un premier temps, a l'entree de l'appel du service de RNVP, on classe les volets 1 a 5 :
                // Dans le cas ou 1, 2 ou 5 volets sont renseignes, il n'y a pas de souci.
                // Dans les autres cas (3 ou4 volets renseignes)
                //      . Le premier champs trouve est considere comme le "volet 1"
                //      . Les restes sont a concatener dans le "volet 4"
                
                
                $aVolAdresseTmp   = array();
                if(trim($aArr['vol1_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol1_ext']);
                }
                if(trim($aArr['vol2_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol2_ext']);
                }
                if(trim($aArr['vol3_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol3_ext']);
                }
                if(trim($aArr['vol4_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol4_ext']);
                }
                if(trim($aArr['vol5_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol5_ext']);
                }
                
                $iNbVolAdresseTmp   = count($aVolAdresseTmp);
                                
                if($iNbVolAdresseTmp >0)
                {
                    /*$aAdrArranger = array(  "volet1" 	=> $aArr['vol1_ext'],
                                        "volet2" 	=> $aArr['vol2_ext'],
                                        "volet3" 	=> trim(implode(" ", array($aArr['vol3_ext'], $aArr['vol4_ext']))),
                                        "volet4" 	=> $aArr['vol5_ext'],
                                        "volet5" 	=> "",
                                        "cp" 	=> $aArr['cp_ext'],
                                        "ville" 	=> $aArr['ville_ext']
                                        );*/
                    $regexAdresse = "/^[0-9]+\s/"; // On considere comme adresse si commence par numerique, puis "espace"
                    switch($iNbVolAdresseTmp)
                    {
                        case 1:
                            $aAdrArranger['volet1']  = '';
                            $aAdrArranger['volet2']  = '';
                            $aAdrArranger['volet3']  = '';
                            $aAdrArranger['volet4']  = $aVolAdresseTmp[0];
                            $aAdrArranger['volet5']  = '';
                            break;
                        
                        case 2:
                            $aAdrArranger['volet1']  = $aVolAdresseTmp[0];
                            $aAdrArranger['volet2']  = '';
                            $aAdrArranger['volet3']  = '';
                            $aAdrArranger['volet4']  = $aVolAdresseTmp[1];
                            $aAdrArranger['volet5']  = '';
                            break;
                        
                        case 3:
                            // 0-1-2
                            $aAdrArranger['volet1']  = $aVolAdresseTmp[0];
                            
                            if(preg_match($regexAdresse, $aVolAdresseTmp[2]))
                            {
                                if(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                                {
                                    $aAdrArranger['volet2']  = '';
                                    $aAdrArranger['volet3']  = $aVolAdresseTmp[1];
                                }
                                else 
                                {
                                    $aAdrArranger['volet2']  = $aVolAdresseTmp[1];
                                    $aAdrArranger['volet3']  = '';
                                }
                                $aAdrArranger['volet4']  = $aVolAdresseTmp[2];
                                $aAdrArranger['volet5']  = '';
                            }
                            elseif(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                            {
                                $aAdrArranger['volet2']  = '';
                                $aAdrArranger['volet3']  = '';
                                $aAdrArranger['volet4']  = $aVolAdresseTmp[1];
                                $aAdrArranger['volet5']  = $aVolAdresseTmp[2];
                            }
                            else
                            {
                                if(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                                {
                                    $aAdrArranger['volet2']  = '';
                                    $aAdrArranger['volet3']  = $aVolAdresseTmp[1];
                                }
                                else 
                                {
                                    $aAdrArranger['volet2']  = $aVolAdresseTmp[1];
                                    $aAdrArranger['volet3']  = '';
                                }
                                $aAdrArranger['volet4']  = $aVolAdresseTmp[2];
                                $aAdrArranger['volet5']  = '';
                            }
                            
                            break;
                        
                        case 4:
                            // 0-1-2-3
                            $aAdrArranger['volet1']  = $aVolAdresseTmp[0];
                            
                            if(preg_match($regexAdresse, $aVolAdresseTmp[3]))
                            {
                                $aAdrArranger['volet2']  = $aVolAdresseTmp[1];
                                $aAdrArranger['volet3']  = $aVolAdresseTmp[2];
                                $aAdrArranger['volet4']  = $aVolAdresseTmp[3];
                                $aAdrArranger['volet5']  = '';
                            }
                            elseif(preg_match($regexAdresse, $aVolAdresseTmp[2]))
                            {
                                if(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                                {
                                    $aAdrArranger['volet2']  = '';
                                    $aAdrArranger['volet3']  = $aVolAdresseTmp[1];
                                }
                                else 
                                {
                                    $aAdrArranger['volet2']  = $aVolAdresseTmp[1];
                                    $aAdrArranger['volet3']  = '';
                                }
                                $aAdrArranger['volet4']  = $aVolAdresseTmp[2];
                                $aAdrArranger['volet5']  = $aVolAdresseTmp[3];
                            } 
                            else
                            {
                                $aAdrArranger['volet2']  = $aVolAdresseTmp[1];
                                $aAdrArranger['volet3']  = $aVolAdresseTmp[2];
                                $aAdrArranger['volet4']  = $aVolAdresseTmp[3];
                                $aAdrArranger['volet5']  = '';
                            }
                            
                            break;
                        
                        case 5:
                            $aAdrArranger['volet1']  = $aVolAdresseTmp[0];
                            $aAdrArranger['volet2']  = $aVolAdresseTmp[1];
                            $aAdrArranger['volet3']  = $aVolAdresseTmp[2];
                            $aAdrArranger['volet4']  = $aVolAdresseTmp[3];
                            $aAdrArranger['volet5']  = $aVolAdresseTmp[4];
                            break;
                    }
                    
                    $aAdrArranger['cp']     = $aArr['cp_ext'];
                    $aAdrArranger['ville']  = $aArr['ville_ext'];
                
                    
                }
                
                
                $oRepoFRProspectionTmp  = $this->find($aArr['id']);
                $oRepoFRProspectionTmp->setVol1ARnvp($aAdrArranger['volet1']);
                $oRepoFRProspectionTmp->setVol2ARnvp($aAdrArranger['volet2']);
                $oRepoFRProspectionTmp->setVol3ARnvp($aAdrArranger['volet3']);
                $oRepoFRProspectionTmp->setVol4ARnvp($aAdrArranger['volet4']);
                $oRepoFRProspectionTmp->setVol5ARnvp($aAdrArranger['volet5']);
                $oRepoFRProspectionTmp->setCpARnvp($aAdrArranger['cp']);
                $oRepoFRProspectionTmp->setVilleARnvp($aAdrArranger['ville']);
                
                $this->_em->flush();
                
            }
            echo "\r\n".date("d/m/Y H:i:s")."\r\n";
        }
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Pour les adresses connues, mise a jour des champs adresses rnvp
     * @throws \Doctrine\DBAL\DBALException
     */
    public function rnvpAdresses($srvRnvp)
    {
        try {
            $sSlct  = " SELECT 
                            id, vol1_a_rnvp, vol2_a_rnvp, vol3_a_rnvp, vol4_a_rnvp, vol5_a_rnvp, cp_a_rnvp, ville_a_rnvp
                        FROM
                            france_routage_prospection_tmp 
                        WHERE
                            adr_ok = 0 AND type_probl IS NULL
                        ";
            $res    = $this->_em->getConnection()->fetchAll($sSlct);
            foreach($res as $aArr) {
                $aAdrRnvp   = array();
                $aAdrRnvp['volet1'] = $aArr['vol1_a_rnvp'];
                $aAdrRnvp['volet2'] = $aArr['vol2_a_rnvp'];
                $aAdrRnvp['volet3'] = $aArr['vol3_a_rnvp'];
                $aAdrRnvp['volet4'] = $aArr['vol4_a_rnvp'];
                $aAdrRnvp['volet5'] = $aArr['vol5_a_rnvp'];
                $aAdrRnvp['cp']     = $aArr['cp_a_rnvp'];
                $aAdrRnvp['ville']  = $aArr['ville_a_rnvp'];
                
                $oResRNVP = $srvRnvp->normalise($aAdrRnvp);
                if($oResRNVP!==false && $oResRNVP->Elfyweb_RNVP_ExpertResult == 0)
                {
                    $aResRNVP   = array();
                    $aVol1RnvpTmp   = array();
                    $sVol1Rnvp   = "";
                    $sVol2Rnvp   = "";
                    $sVol3Rnvp   = "";
                    if($oResRNVP->pio_civ) $aVol1RnvpTmp[] = $oResRNVP->pio_civ;
                    if($oResRNVP->pio_nom) $aVol1RnvpTmp[] = $oResRNVP->pio_nom;
                    if($oResRNVP->pio_prenom) $aVol1RnvpTmp[] = $oResRNVP->pio_prenom;
                    if(!empty($aVol1RnvpTmp)) $sVol1Rnvp   = implode(" ", $aVol1RnvpTmp);
                    if($oResRNVP->pio_cnom) $sVol2Rnvp   = $oResRNVP->pio_cnom;
                    if($oResRNVP->pio_cadrs) $sVol3Rnvp   = $oResRNVP->pio_cadrs;

                    if($sVol1Rnvp=="" && $sVol2Rnvp=="" && $sVol3Rnvp!="")
                    {
                        $sVol1Rnvp   = $sVol3Rnvp;
                        $sVol2Rnvp   = "";
                        $sVol3Rnvp   = "";
                    }
                    else if($sVol1Rnvp=="" && $sVol2Rnvp!="" && $sVol3Rnvp!="")
                    {
                        $sVol1Rnvp   = $sVol2Rnvp;
                        $sVol2Rnvp   = "";
                        $sVol3Rnvp   = $sVol3Rnvp;
                    }
                    $aResRNVP["id"]   = $aArr['id'];
                    $aResRNVP["vol1"]   = strtoupper($sVol1Rnvp);
                    $aResRNVP["vol2"]   = strtoupper($sVol2Rnvp);
                    $aResRNVP["vol3"]   = strtoupper($sVol3Rnvp);
                    $aResRNVP["vol4"]   = strtoupper($oResRNVP->pio_adresse);
                    $aResRNVP["vol5"]   = strtoupper($oResRNVP->pio_lieudit);
                    $aResRNVP["cp"]     = $oResRNVP->po_cp;
                    $aResRNVP["ville"]   = strtoupper($oResRNVP->po_ville);
                    $aResRNVP["insee"]   = $oResRNVP->po_insee;
                    
                    if($aResRNVP["vol1"] == $aResRNVP["vol2"])
                    {
                        $aResRNVP["vol2"]   = "";
                    }
                    
                    if($aArr['id']==181)
                    {
                        print_r($aAdrRnvp);
                        print_r($aResRNVP);
                    }

                    if(in_array($oResRNVP->etatRetourRnvp, array('RNVP_OK', 'RNVP_INFO_VILLE_VOIE_INCOMPLET'))
                            || ($oResRNVP->etatRetourRnvp == 'RNVP_AVEC_RISQUE' && $oResRNVP->po_cqadrs <=2)
                            )
                    {
                        $this->createQueryBuilder('t')->update()
                            ->set('t.rnvpVol1', ':vol1')
                            ->set('t.rnvpVol2', ':vol2')
                            ->set('t.rnvpVol3', ':vol3')
                            ->set('t.rnvpVol4', ':vol4')
                            ->set('t.rnvpVol5', ':vol5')
                            ->set('t.rnvpCp', ':cp')
                            ->set('t.rnvpVille', ':ville')
                            ->set('t.rnvpInsee', ':insee')
                            ->set('t.adrOk', 1)
                            ->where('t.id = :id')
                            ->setParameters($aResRNVP)
                            ->getQuery()->execute();
                    }
                    else
                    {
                        $aResRNVP["type_probl"]   = 'ERR_RNVP'.'_'.$oResRNVP->etatRetourRnvp;
                        $this->createQueryBuilder('t')->update()
                            ->set('t.rnvpVol1', ':vol1')
                            ->set('t.rnvpVol2', ':vol2')
                            ->set('t.rnvpVol3', ':vol3')
                            ->set('t.rnvpVol4', ':vol4')
                            ->set('t.rnvpVol5', ':vol5')
                            ->set('t.rnvpCp', ':cp')
                            ->set('t.rnvpVille', ':ville')
                            ->set('t.rnvpInsee', ':insee')
                            ->set('t.typeProbl', ':type_probl')
                            ->where('t.id = :id')
                            ->setParameters($aResRNVP)
                            ->getQuery()->execute();
                    }
                }
                else
                {
                    trigger_error("Webservice non passe pour nom : ".$aArr["volet1"]." - cplt nom : ".$aArr["volet2"]." - cplt adr : ".$aArr["volet3"]." - adr : ".$aArr["volet4"]." - lieu dit : ".$aArr["volet5"]." - cp : ".$aArr["cp"]." - ville : ".$aArr["ville"], E_USER_WARNING);
                }
            }
            
            // Si on arrete la, on ne sert pas les abonnes dont l'adresse n'est pas normalisee meme si l'abonne est deja connu 
            
            
        } 
        //catch (RnvpLocalException $rnvpLocalException) {
        //    throw $rnvpLocalException;
        //}
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }
    
    /**
     * Reorganisation des adresses a normaliser er normalisation
     * 
     * @param Service $srvRnvp
     * @throws \Ams\DistributionBundle\Repository\DBALException
     */
    public function reorganisationAdresseEtRNVP($srvRnvp)
    {
        try {
            $sSlct  = " SELECT 
                            id, vol1_ext, vol2_ext, vol3_ext, vol4_ext, vol5_ext, cp_ext, ville_ext
                        FROM
                            france_routage_prospection_tmp 
                        WHERE
                            adr_ok = 0 AND type_probl IS NULL
                        ";
            $res    = $this->_em->getConnection()->fetchAll($sSlct);
            $iI = 0;
            echo "\r\n".date("d/m/Y H:i:s")."\r\n";
            foreach($res as $aArr) {
                $iI++;
                echo ".";
                if($iI%100==0)
                {
                    echo $iI."\r\n";
                }
                $aAdrANormaliser   = array();
                // On met en :
                //    - volet 1 pour RNVP : volet 1 
                //    - volet 2 pour RNVP : volet 2 
                //    - volet 3 pour RNVP : volet 3 + volet 4 
                //    - volet 4 pour RNVP : volet 5 
                //    - volet 5 pour RNVP : rien 
                
                
                // Dans un premier temps, a l'entree de l'appel du service de RNVP, on classe les volets 1 a 5 :
                // Dans le cas ou 1, 2 ou 5 volets sont renseignes, il n'y a pas de souci.
                // Dans les autres cas (3 ou4 volets renseignes)
                //      . Le premier champs trouve est considere comme le "volet 1"
                //      . Les restes sont a concatener dans le "volet 4"
                
                
                $aVolAdresseTmp   = array();
                if(trim($aArr['vol1_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol1_ext']);
                }
                if(trim($aArr['vol2_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol2_ext']);
                }
                if(trim($aArr['vol3_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol3_ext']);
                }
                if(trim($aArr['vol4_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol4_ext']);
                }
                if(trim($aArr['vol5_ext'])!="")
                {
                    $aVolAdresseTmp[]  = trim($aArr['vol5_ext']);
                }
                
                $iNbVolAdresseTmp   = count($aVolAdresseTmp);
                                
                if($iNbVolAdresseTmp >0)
                {
                    /*$aAdrANormaliser = array(  "volet1" 	=> $aArr['vol1_ext'],
                                        "volet2" 	=> $aArr['vol2_ext'],
                                        "volet3" 	=> trim(implode(" ", array($aArr['vol3_ext'], $aArr['vol4_ext']))),
                                        "volet4" 	=> $aArr['vol5_ext'],
                                        "volet5" 	=> "",
                                        "cp" 	=> $aArr['cp_ext'],
                                        "ville" 	=> $aArr['ville_ext']
                                        );*/
                    $regexAdresse = "/^[0-9]+\s/"; // On considere comme adresse si commence par numerique, puis "espace"
                    switch($iNbVolAdresseTmp)
                    {
                        case 1:
                            $aAdrANormaliser['volet1']  = '';
                            $aAdrANormaliser['volet2']  = '';
                            $aAdrANormaliser['volet3']  = '';
                            $aAdrANormaliser['volet4']  = $aVolAdresseTmp[0];
                            $aAdrANormaliser['volet5']  = '';
                            break;
                        
                        case 2:
                            $aAdrANormaliser['volet1']  = $aVolAdresseTmp[0];
                            $aAdrANormaliser['volet2']  = '';
                            $aAdrANormaliser['volet3']  = '';
                            $aAdrANormaliser['volet4']  = $aVolAdresseTmp[1];
                            $aAdrANormaliser['volet5']  = '';
                            break;
                        
                        case 3:
                            // 0-1-2
                            $aAdrANormaliser['volet1']  = $aVolAdresseTmp[0];
                            
                            if(preg_match($regexAdresse, $aVolAdresseTmp[2]))
                            {
                                if(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                                {
                                    $aAdrANormaliser['volet2']  = '';
                                    $aAdrANormaliser['volet3']  = $aVolAdresseTmp[1];
                                }
                                else 
                                {
                                    $aAdrANormaliser['volet2']  = $aVolAdresseTmp[1];
                                    $aAdrANormaliser['volet3']  = '';
                                }
                                $aAdrANormaliser['volet4']  = $aVolAdresseTmp[2];
                                $aAdrANormaliser['volet5']  = '';
                            }
                            elseif(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                            {
                                $aAdrANormaliser['volet2']  = '';
                                $aAdrANormaliser['volet3']  = '';
                                $aAdrANormaliser['volet4']  = $aVolAdresseTmp[1];
                                $aAdrANormaliser['volet5']  = $aVolAdresseTmp[2];
                            }
                            else
                            {
                                if(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                                {
                                    $aAdrANormaliser['volet2']  = '';
                                    $aAdrANormaliser['volet3']  = $aVolAdresseTmp[1];
                                }
                                else 
                                {
                                    $aAdrANormaliser['volet2']  = $aVolAdresseTmp[1];
                                    $aAdrANormaliser['volet3']  = '';
                                }
                                $aAdrANormaliser['volet4']  = $aVolAdresseTmp[2];
                                $aAdrANormaliser['volet5']  = '';
                            }
                            
                            break;
                        
                        case 4:
                            // 0-1-2-3
                            $aAdrANormaliser['volet1']  = $aVolAdresseTmp[0];
                            
                            if(preg_match($regexAdresse, $aVolAdresseTmp[3]))
                            {
                                $aAdrANormaliser['volet2']  = $aVolAdresseTmp[1];
                                $aAdrANormaliser['volet3']  = $aVolAdresseTmp[2];
                                $aAdrANormaliser['volet4']  = $aVolAdresseTmp[3];
                                $aAdrANormaliser['volet5']  = '';
                            }
                            elseif(preg_match($regexAdresse, $aVolAdresseTmp[2]))
                            {
                                if(preg_match($regexAdresse, $aVolAdresseTmp[1]))
                                {
                                    $aAdrANormaliser['volet2']  = '';
                                    $aAdrANormaliser['volet3']  = $aVolAdresseTmp[1];
                                }
                                else 
                                {
                                    $aAdrANormaliser['volet2']  = $aVolAdresseTmp[1];
                                    $aAdrANormaliser['volet3']  = '';
                                }
                                $aAdrANormaliser['volet4']  = $aVolAdresseTmp[2];
                                $aAdrANormaliser['volet5']  = $aVolAdresseTmp[3];
                            } 
                            else
                            {
                                $aAdrANormaliser['volet2']  = $aVolAdresseTmp[1];
                                $aAdrANormaliser['volet3']  = $aVolAdresseTmp[2];
                                $aAdrANormaliser['volet4']  = $aVolAdresseTmp[3];
                                $aAdrANormaliser['volet5']  = '';
                            }
                            
                            break;
                        
                        case 5:
                            $aAdrANormaliser['volet1']  = $aVolAdresseTmp[0];
                            $aAdrANormaliser['volet2']  = $aVolAdresseTmp[1];
                            $aAdrANormaliser['volet3']  = $aVolAdresseTmp[2];
                            $aAdrANormaliser['volet4']  = $aVolAdresseTmp[3];
                            $aAdrANormaliser['volet5']  = $aVolAdresseTmp[4];
                            break;
                    }
                    
                    $aAdrANormaliser['cp']     = $aArr['cp_ext'];
                    $aAdrANormaliser['ville']  = $aArr['ville_ext'];
                
                    
                    
                    // Normalisation
                    $oResRNVP = $srvRnvp->normalise($aAdrANormaliser);
                    if($oResRNVP!==false && $oResRNVP->Elfyweb_RNVP_ExpertResult == 0)
                    {
                        $aResRNVP   = array();
                        $aVol1RnvpTmp   = array();
                        $sVol1Rnvp   = "";
                        $sVol2Rnvp   = "";
                        $sVol3Rnvp   = "";
                        if($oResRNVP->pio_civ) $aVol1RnvpTmp[] = $oResRNVP->pio_civ;
                        if($oResRNVP->pio_nom) $aVol1RnvpTmp[] = $oResRNVP->pio_nom;
                        if($oResRNVP->pio_prenom) $aVol1RnvpTmp[] = $oResRNVP->pio_prenom;
                        if(!empty($aVol1RnvpTmp)) $sVol1Rnvp   = implode(" ", $aVol1RnvpTmp);
                        if($oResRNVP->pio_cnom) $sVol2Rnvp   = $oResRNVP->pio_cnom;
                        if($oResRNVP->pio_cadrs) $sVol3Rnvp   = $oResRNVP->pio_cadrs;

                        if($sVol1Rnvp=="" && $sVol2Rnvp=="" && $sVol3Rnvp!="")
                        {
                            $sVol1Rnvp   = $sVol3Rnvp;
                            $sVol2Rnvp   = "";
                            $sVol3Rnvp   = "";
                        }
                        else if($sVol1Rnvp=="" && $sVol2Rnvp!="" && $sVol3Rnvp!="")
                        {
                            $sVol1Rnvp   = $sVol2Rnvp;
                            $sVol2Rnvp   = "";
                            $sVol3Rnvp   = $sVol3Rnvp;
                        }
                        $aResRNVP["id"]   = $aArr['id'];
                        $aResRNVP["vol1"]   = strtoupper($sVol1Rnvp);
                        $aResRNVP["vol2"]   = strtoupper($sVol2Rnvp);
                        $aResRNVP["vol3"]   = strtoupper($sVol3Rnvp);
                        $aResRNVP["vol4"]   = strtoupper($oResRNVP->pio_adresse);
                        $aResRNVP["vol5"]   = strtoupper($oResRNVP->pio_lieudit);
                        $aResRNVP["cp"]     = $oResRNVP->po_cp;
                        $aResRNVP["ville"]   = strtoupper($oResRNVP->po_ville);
                        $aResRNVP["insee"]   = $oResRNVP->po_insee;
                        
                        $aResRNVP["vol1_a_rnvp"]   = $aAdrANormaliser['volet1'];
                        $aResRNVP["vol2_a_rnvp"]   = $aAdrANormaliser['volet2'];
                        $aResRNVP["vol3_a_rnvp"]   = $aAdrANormaliser['volet3'];
                        $aResRNVP["vol4_a_rnvp"]   = $aAdrANormaliser['volet4'];
                        $aResRNVP["vol5_a_rnvp"]   = $aAdrANormaliser['volet5'];
                        $aResRNVP["cp_a_rnvp"]     = $aAdrANormaliser['cp'];
                        $aResRNVP["ville_a_rnvp"]   = $aAdrANormaliser['ville'];

                        if(in_array($oResRNVP->etatRetourRnvp, array('RNVP_OK', 'RNVP_INFO_VILLE_VOIE_INCOMPLET'))
                                || ($oResRNVP->etatRetourRnvp == 'RNVP_AVEC_RISQUE' && $oResRNVP->po_cqadrs <=2)
                                )
                        {
                            $this->createQueryBuilder('t')->update()
                                ->set('t.rnvpVol1', ':vol1')
                                ->set('t.rnvpVol2', ':vol2')
                                ->set('t.rnvpVol3', ':vol3')
                                ->set('t.rnvpVol4', ':vol4')
                                ->set('t.rnvpVol5', ':vol5')
                                ->set('t.rnvpCp', ':cp')
                                ->set('t.rnvpVille', ':ville')
                                ->set('t.rnvpInsee', ':insee')
                                
                                ->set('t.vol1ARnvp', ':vol1_a_rnvp')
                                ->set('t.vol2ARnvp', ':vol2_a_rnvp')
                                ->set('t.vol3ARnvp', ':vol3_a_rnvp')
                                ->set('t.vol4ARnvp', ':vol4_a_rnvp')
                                ->set('t.vol5ARnvp', ':vol5_a_rnvp')
                                ->set('t.cpARnvp', ':cp_a_rnvp')
                                ->set('t.villeARnvp', ':ville_a_rnvp')
                                    
                                ->set('t.adrOk', 1)
                                ->where('t.id = :id')
                                ->setParameters($aResRNVP)
                                ->getQuery()->execute();
                        }
                        else
                        {
                            $aResRNVP["type_probl"]   = 'ERR_RNVP'.'_'.$oResRNVP->etatRetourRnvp;
                            $this->createQueryBuilder('t')->update()
                                ->set('t.rnvpVol1', ':vol1')
                                ->set('t.rnvpVol2', ':vol2')
                                ->set('t.rnvpVol3', ':vol3')
                                ->set('t.rnvpVol4', ':vol4')
                                ->set('t.rnvpVol5', ':vol5')
                                ->set('t.rnvpCp', ':cp')
                                ->set('t.rnvpVille', ':ville')
                                ->set('t.rnvpInsee', ':insee')
                                
                                ->set('t.vol1ARnvp', ':vol1_a_rnvp')
                                ->set('t.vol2ARnvp', ':vol2_a_rnvp')
                                ->set('t.vol3ARnvp', ':vol3_a_rnvp')
                                ->set('t.vol4ARnvp', ':vol4_a_rnvp')
                                ->set('t.vol5ARnvp', ':vol5_a_rnvp')
                                ->set('t.cpARnvp', ':cp_a_rnvp')
                                ->set('t.villeARnvp', ':ville_a_rnvp')
                                    
                                ->set('t.typeProbl', ':type_probl')
                                ->where('t.id = :id')
                                ->setParameters($aResRNVP)
                                ->getQuery()->execute();
                        }
                    }
                    else
                    {
                        trigger_error("Webservice non passe pour nom : ".$aArr["vol1_ext"]." - cplt nom : ".$aArr["vol2_ext"]." - cplt adr : ".$aArr["vol3_ext"]." - adr : ".$aArr["vol4_ext"]." - lieu dit : ".$aArr["vol5_ext"]." - cp : ".$aArr["cp_ext"]." - ville : ".$aArr["ville_ext"], E_USER_WARNING);
                    }
                    
                    
                }
                //$this->_em->flush();
                
            }
            echo "\r\n".date("d/m/Y H:i:s")."\r\n";
        }
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }

    /**
     * Marquage des adresses livrables
     * 
     * @param \AmsReferentielBundle\RefFlux $flux
     * @throws \Ams\DistributionBundle\Repository\DBALException
     */
    public function marquageAdresssesLivrables($flux) {
        try {
            
            // ( is_null($flux) ? "" : " AND csl.flux_id = ".$flux->getId() )." 
            $aFluxId    = array();
            if(is_null($flux))
            {
                // On prend tous les flux
                $repoFlux    = $this->_em->getRepository('AmsReferentielBundle:RefFlux');
                $aoFlux = $repoFlux->findAll();
                foreach($aoFlux as $oFlux)
                {
                    $aFluxId[]  = $oFlux->getId();
                }
            }
            else {
                $aFluxId[]  = $flux->getId();
            }
            
            foreach($aFluxId as $iK => $iFluxId)
            {
                if($iK==0)
                {
                    $sUpdate    = " UPDATE
                                    france_routage_prospection_tmp t
                                    INNER JOIN france_routage_prospection_adr_norm_ref_tmp ref ON t.rnvp_vol4 = ref.adresse AND t.rnvp_insee = ref.insee AND ref.flux_id = $iFluxId
                                    INNER JOIN modele_tournee_jour mtj ON ref.tournee_jour_id = mtj.id 
                                    INNER JOIN modele_tournee mt ON mtj.tournee_id = mt.id
                                    INNER JOIN groupe_tournee gt ON mt.groupe_id = gt.id
                                SET
                                    t.tournee_jour_id = ref.tournee_jour_id
                                    , t.date_ref = ref.date_ref
                                    , t.jour_id = CAST(DATE_FORMAT(ref.date_ref, '%w') AS SIGNED)+1
                                    , t.depot_id = gt.depot_id
                                    , t.flux_id = gt.flux_id
                                    , t.livrable = 1
                                WHERE
                                    1 = 1 
                                    AND t.type_probl IS NULL
                                    AND t.origine = 1
                                ";            
                    $this->_em->getConnection()->executeQuery($sUpdate);
                }
                else
                {
                    $sInsert    = " INSERT INTO france_routage_prospection_tmp 
                                        (fr_prospection_liste_id, commune_id, depot_id, jour_id, flux_id, tournee_jour_id, societe_id, date_distrib, date_ref, num_parution, numabo_ext, vol1_ext, vol2_ext, vol3_ext, vol4_ext, vol5_ext, cp_ext, ville_ext, qte, divers1, info_comp1, info_comp2, divers2, client_type, vol1_a_rnvp, vol2_a_rnvp, vol3_a_rnvp, vol4_a_rnvp, vol5_a_rnvp, cp_a_rnvp, ville_a_rnvp, rnvp_vol1, rnvp_vol2, rnvp_vol3, rnvp_vol4, rnvp_vol5, rnvp_cp, rnvp_ville, rnvp_insee, adr_ok, type_probl, chgt_adr, livrable, soc_code_ext, prd_code_ext, spr_code_ext)
                                    SELECT
                                        t.fr_prospection_liste_id, t.commune_id, gt.depot_id AS depot_id, t.jour_id, gt.flux_id AS flux_id, ref.tournee_jour_id AS tournee_jour_id, t.societe_id, t.date_distrib, t.date_ref, t.num_parution, t.numabo_ext, t.vol1_ext, t.vol2_ext, t.vol3_ext, t.vol4_ext, t.vol5_ext, t.cp_ext, t.ville_ext, t.qte, t.divers1, t.info_comp1, t.info_comp2, t.divers2, t.client_type, t.vol1_a_rnvp, t.vol2_a_rnvp, t.vol3_a_rnvp, t.vol4_a_rnvp, t.vol5_a_rnvp, t.cp_a_rnvp, t.ville_a_rnvp, t.rnvp_vol1, t.rnvp_vol2, t.rnvp_vol3, t.rnvp_vol4, t.rnvp_vol5, t.rnvp_cp, t.rnvp_ville, t.rnvp_insee, t.adr_ok, t.type_probl, t.chgt_adr, 1 AS livrable, t.soc_code_ext, t.prd_code_ext, t.spr_code_ext
                                    FROM
                                        france_routage_prospection_tmp t
                                        INNER JOIN france_routage_prospection_adr_norm_ref_tmp ref ON t.rnvp_vol4 = ref.adresse AND t.rnvp_insee = ref.insee AND ref.flux_id = $iFluxId
                                        INNER JOIN modele_tournee_jour mtj ON ref.tournee_jour_id = mtj.id 
                                        INNER JOIN modele_tournee mt ON mtj.tournee_id = mt.id
                                        INNER JOIN groupe_tournee gt ON mt.groupe_id = gt.id
                                    WHERE
                                        1 = 1 
                                        AND t.type_probl IS NULL
                                        AND t.origine = 1 ";
                    $this->_em->getConnection()->executeQuery($sInsert);
                }
            }
            
            // Verification des adresses livrees a la fois la NUIT et le JOUR
            // SELECT rnvp_vol1, rnvp_vol2, rnvp_vol3, rnvp_vol4, rnvp_vol5, rnvp_insee, count(distinct flux_id) nb_flux, count(*) nb FROM `france_routage_prospection` WHERE 1 group by rnvp_vol1, rnvp_vol2, rnvp_vol3, rnvp_vol4, rnvp_vol5, rnvp_insee having nb_flux > 1 
            
        }
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }

    /**
     * Stockage des adresses livrables. Si le deuxieme parametre est different de "0" => on ne stocke que les livrables
     * @param integer $FRProspectionListeId
     * @param boolean $bLivrable
     * @throws \Ams\DistributionBundle\Repository\DBALException
     */
    public function stockageAdresssesLivrables($FRProspectionListeId, $bLivrable=0) {
        try {
            // Verification si on continue le traitement
            $bTraitementAFaire  = false;
            $repoFR_ProspectionListe    = $this->_em->getRepository('AmsDistributionBundle:FranceRoutageProspectionListe');
            $aFR_ProspectionListeCritere = array(
                                                'id' => $FRProspectionListeId,
                                                'dateAnnulation' => NULL
                                              );
            $oFR_ProspectionListe   = $repoFR_ProspectionListe->findOneBy($aFR_ProspectionListeCritere);

            if(!empty($oFR_ProspectionListe))
            {
                $bTraitementAFaire  = true;
            }
                  
            if($bTraitementAFaire==true)
            {
                $sDelete    = " DELETE FROM france_routage_prospection WHERE fr_prospection_liste_id = ".$FRProspectionListeId." ";            
                $this->_em->getConnection()->executeQuery($sDelete);

                $sInsert    = " INSERT INTO france_routage_prospection
                                    (
                                    fr_prospection_liste_id, commune_id, depot_id, jour_id, flux_id, tournee_jour_id, societe_id, date_distrib, date_ref, num_parution
                                    , numabo_ext, vol1_ext, vol2_ext, vol3_ext, vol4_ext, vol5_ext, cp_ext, ville_ext, qte, divers1
                                    , info_comp1, info_comp2, divers2, client_type, vol1_a_rnvp, vol2_a_rnvp, vol3_a_rnvp, vol4_a_rnvp, vol5_a_rnvp, cp_a_rnvp
                                    , ville_a_rnvp, rnvp_vol1, rnvp_vol2, rnvp_vol3, rnvp_vol4, rnvp_vol5, rnvp_cp, rnvp_ville, rnvp_insee, adr_ok
                                    , type_probl, chgt_adr, livrable, soc_code_ext, prd_code_ext, spr_code_ext
                                    )
                                SELECT
                                    ".$FRProspectionListeId.", commune_id, depot_id, jour_id, flux_id, tournee_jour_id, societe_id, date_distrib, date_ref, num_parution
                                    , numabo_ext, vol1_ext, vol2_ext, vol3_ext, vol4_ext, vol5_ext, cp_ext, ville_ext, qte, divers1
                                    , info_comp1, info_comp2, divers2, client_type, vol1_a_rnvp, vol2_a_rnvp, vol3_a_rnvp, vol4_a_rnvp, vol5_a_rnvp, cp_a_rnvp
                                    , ville_a_rnvp, rnvp_vol1, rnvp_vol2, rnvp_vol3, rnvp_vol4, rnvp_vol5, rnvp_cp, rnvp_ville, rnvp_insee, adr_ok
                                    , type_probl, chgt_adr, livrable, soc_code_ext, prd_code_ext, spr_code_ext
                                FROM
                                    france_routage_prospection_tmp 
                                WHERE
                                    1 = 1
                                    ".( ($bLivrable==0) ? "" : " AND livrable = 1 " )."
                                ";            
                $this->_em->getConnection()->executeQuery($sInsert);

                $sDateFinTraitement = date("Y-m-d H:i:s");
                $sUpdateFRProspectionListe  = " UPDATE france_routage_prospection_liste SET  date_fin_traitement = '".$sDateFinTraitement."' WHERE id = ".$FRProspectionListeId." ";
                $this->_em->getConnection()->executeQuery($sUpdateFRProspectionListe);
            }
        }
        catch (DBALException $DBALException) {
            throw $DBALException;
        }
    }  
    
}
