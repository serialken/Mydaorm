<?php

namespace Ams\DistributionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Ams\SilogBundle\Repository\GlobalRepository;

/**
 * ParutionSpecialeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParutionSpecialeRepository extends GlobalRepository
{

    public function getParutions($mois = null)
    {
        $qb = $this->createQueryBuilder('par')
            ->join('par.produit', 'produit')
                ->addSelect('produit')
            ->leftJoin('produit.image','image')
                ->addSelect('image');
        
        if ($mois != null) {
            $qb ->where('month(par.dateParution) = :mois ')
                ->setParameter('mois', $mois);
        }
        
        return $qb->getQuery()->getResult();
    }
    
    
    public function getParutionsByDate($jour)
    {
        $qb = $this->createQueryBuilder('par')
            ->join('par.produit', 'produit')
                ->addSelect('produit')
            ->leftJoin('produit.image','image')
                ->addSelect('image')
        
         ->where('par.dateParution = :jour')
                ->setParameter('jour', $jour);
    
        return $qb->getQuery()->getResult();
    }
     
    public function getParutionsBetweenDate($debut, $fin, $produit = NULL)
    {
        $qb = $this->createQueryBuilder('par')
            ->join('par.produit', 'produit')
                ->addSelect('produit')
            ->leftJoin('produit.image','image')
                ->addSelect('image')
        
         ->where('par.dateParution between :debut and :fin')
                ->setParameters( array('debut' =>$debut, 'fin' => $fin));
         if($produit) {
             $qb->andWhere ('par.produit = :produit')
                 ->setParameter('produit', $produit);     
         }
         
        return $qb->getQuery()->getResult();
    }

    public function update($param) {
        try {
            $sql = "UPDATE parution_speciale SET 
                        produit_id = " . $param['produit_id'] . ",
                        libelle = " . $this->sqlField->sqlTrimQuote(htmlspecialchars_decode($param['libelle'])) . ",
                        date_parution = " . $this->sqlField->sqlDate($param['date_parution']) . ",
                        zone_distribution = " . $this->sqlField->sqlTrimQuote(htmlspecialchars_decode($param['zone_distribution'])) . ",
                        evenement_id = " . $this->sqlField->sqlTrimQuote($param['evenement_id'])." 
                    ";
            $sql .= " WHERE id =" . $param['gr_id'];
            $this->_em->getConnection()->prepare($sql)->execute();
        } catch (DBALException $ex) {
            return $ex->getMessage();
        }
        return true;
    }


    
        
    
  /*   public function insert(&$msg, &$msgException, $param, $user, &$id) {
        try {
             $sql = "INSERT INTO parution_speciale SET 
                        produit_id = " . $param['produit_id'] . ",
                        libelle = '" . $this->sqlField->sqlTrimQuote($param['libelle']) . "',
                        date_parution = '" . $this->sqlField->sqlDate($param['date_parution']) . "',
                        libelle = '" . $this->sqlField->sqlTrimQuote($param['libelle']) . "',
                        libelle_court = '" . $this->sqlField->sqlTrimQuote($param['libelle_court']) . "',
                        zone_distribution = '" . $this->sqlField->sqlTrimQuote($param['zone_distribution']) . "',
                        evenement_id = '" . $this->sqlField->sqlTrimQuote($param['evenement_id'])."' ,
                        utilisateur_id = " . $user . ",
                        date_creation = NOW()";
            $this->_em->getConnection()->prepare($sql)->execute();
            $id = $this->_em->getConnection()->lastInsertId();
            
            
        } catch (DBALException $ex) {
            return $this->sqlField->sqlError($msg, $msgException, $ex,"Une erreur est survenue");
        }
        return true;
    }
*/
}
