<?php

namespace Ams\DistributionBundle\Repository;

use Ams\SilogBundle\Repository\GlobalRepository;

/**
 * DetailExNonDistribRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DetailExNonDistribRepository extends GlobalRepository
{
    public function getProductId($product, $societe) {
        $sql = "SELECT id
                FROM produit p
                WHERE 
                    p.libelle = '".$product."'
                AND
                    p.soc_code_ext = '".$societe."'";
        
        return $this->_em->getConnection()->fetchAll($sql);
    }
    public function getListeProduitNonLivre($date, $id)
    {
        $sql = "SELECT 
                    p.soc_code_ext as code, 
                    p.libelle as nom_produit, 
                    dcd.nb_ex_abo, 
                    dcd.nb_ex_diff, 
                    cd.id as id_compte_rendu
                    
                FROM produit p
                
                LEFT JOIN detail_cptr_distrib dcd ON p.id = dcd.product_id
                    AND dcd.date_cpt_rendu = '".$date."'
                    AND dcd.cptr_distrib_id = '".$id."'
                
                LEFT JOIN cptr_distribution cd ON cd.id = dcd.cptr_distrib_id 
                    AND cd.date_cpt_rendu = '".$date."'
                    
                WHERE 
                    '".$date."' BETWEEN p.date_debut AND p.date_fin;";
        
        return $this->_em->getConnection()->fetchAll($sql);
    }
    
    public function isNew($param, $id_cptr, $date){
        $sql = "SELECT * 
                FROM 
                    detail_cptr_distrib
                WHERE 
                    date_cpt_rendu = '".$date."'
                AND 
                    product_id = '".$param[$param['ids'].'_produit']."'
                AND 
                    cptr_distrib_id = '".$id_cptr."'";
        
        return $this->_em->getConnection()->fetchAll($sql);
    }
    
    public function insert($param, $id_cptr, $date) {
        try {
            $sql = "INSERT INTO detail_cptr_distrib 
                        (product_id, 
                        nb_ex_abo, 
                        nb_ex_diff,
                        cptr_distrib_id,
                        date_cpt_rendu) 
                    VALUES 
                        ('".$param[$param['ids'].'_produit']."',  
                        '".$param[$param['ids'].'_nb_ex_abo']."', 
                        '".$param[$param['ids'].'_nb_ex_diff']."', 
                        '".$id_cptr."', 
                        '".$date."');";
            
            $this->_em->getConnection()->prepare($sql)->execute();
            $id = $this->_em->getConnection()->lastInsertId();
        } catch (DBALException $ex) {
            return $this->sqlField->sqlError($msg, $msgException, $ex, "L'activite doit être unique.","UNIQUE","");
        }
        return true;
    }
    
    public function update($param, $id) {   
        try {
            $sql = "UPDATE detail_cptr_distrib SET 
                nb_ex_abo = '" . $param[$param['ids'].'_nb_ex_abo'] . "',
                nb_ex_diff = '" . $param[$param['ids'].'_nb_ex_diff'] . "'
                WHERE id = " . $id;
            
            $this->_em->getConnection()->prepare($sql)->execute();
            
        } catch (DBALException $ex) {
            return $this->sqlField->sqlError($msg, $msgException, $ex, "L'activite doit être unique.","UNIQUE","");
        }
        return true;
    }
}
