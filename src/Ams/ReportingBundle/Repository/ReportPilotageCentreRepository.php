<?php

namespace Ams\ReportingBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * report_pilotage_centreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportPilotageCentreRepository extends EntityRepository {
    
    /**
     * Informations de reporting global en fonction des depots
     * @param date $dateMin, $dateMax
     * @param integer $flux, $sDepotId
     * @return array
     */
    public function sumAbo($dateMin, $dateMax, $flux, $sDepotId) {

        $q = "
            SELECT 
                r.id,
                depot.libelle AS depot ,
                depot.id as depot_id,
                g.id as group_depot_id,
                g.libelle as group_depot_libelle,
                SUM(r.Nb_client_Abo) AS nbClientAbo ,
                SUM(r.`Nb_Ex_Abo`) AS nbExAbo ,
                SUM(r.`Nb_Diff`) AS nbDiff ,
                SUM(r.`Nb_clients_DIV`) AS nbClientsDIV ,
                SUM(r.`Nb_Ex_DIV`) AS nbExDIV ,
                SUM(r.`Nb_ex_en_supplements`) AS nbExEnSupplements ,
                SUM(r.`Nb_adresses`) AS nbAdresses ,
                ROUND(SUM(TIME_TO_SEC(r.`Nb_Heures`)) / 3600,2) AS nbHeures,
                ROUND(AVG(r.`Etalon`),5) AS etalon ,
                SUM(r.`nombre_reclam_brut`) AS nombreReclamBrut ,
                SUM(r.`nombre_reclam_net`) AS nombreReclamNet ,
                SUM(r.`nombre_reclam_Div_Brut`) AS nombreReclamDivBrut ,
                SUM(r.`nombre_reclam_Div_Net`) AS nombreReclamDivNet ,
                SUM(r.`Nb_km`) AS nbKm,
                r.`flux` AS flux
            FROM
                report_pilotage_centre r
                INNER JOIN depot ON r.depot = depot.code
                INNER JOIN dep_groupe_depot dep ON depot.id = dep.dep_code
                INNER JOIN groupe_depot g  ON dep.grd_code = g.id
            WHERE r.date_distrib >= '$dateMin'
            AND r.date_distrib <= '$dateMax'
            AND depot.id IN(" . implode(',', $sDepotId) . ")
            AND (g.id = 1 OR g.id = 2 OR g.id = 3)
            AND (r.setToDelete <> 1 OR r.setToDelete IS NULL)
        ";
        if ($flux)
            $q .= "AND r.flux = $flux ";
        $q .= "
              GROUP BY depot.id 
              ORDER BY g.id
            ";
        return $this->_em->getConnection()->fetchAll($q);
    }
    
    /**
     * Informations de reporting detail d'un depot selectionné
     * @param date $dateMin, $dateMax 
     * @param integer $depot, $flux, $sDepotId 
     * @return array
     */

    public function majDetailDepot($depot, $dateMin, $dateMax, $flux, $sDepotId) {

        $q = "
            SELECT 
                r.id,
                r.Code_Tournee AS codeTournee ,
                SUM(r.Nb_client_Abo) AS nbClientAbo ,
                SUM(r.`Nb_Ex_Abo`) AS nbExAbo ,
                SUM(r.`Nb_Diff`) AS nbDiff ,
                SUM(r.`Nb_clients_DIV`) AS nbClientsDIV ,
                SUM(r.`Nb_Ex_DIV`) AS nbExDIV ,
                SUM(r.`Nb_ex_en_supplements`) AS nbExEnSupplements ,
                SUM(r.`Nb_adresses`) AS nbAdresses ,
                ROUND(SUM(TIME_TO_SEC(r.`Nb_Heures`)) / 3600,2) AS nbHeures,
                ROUND(AVG(r.`Etalon`),5) AS etalon ,
                SUM(r.`nombre_reclam_brut`) AS nombreReclamBrut ,
                SUM(r.`nombre_reclam_net`) AS nombreReclamNet ,
                SUM(r.`nombre_reclam_Div_Brut`) AS nombreReclamDivBrut ,
                SUM(r.`nombre_reclam_Div_Net`) AS nombreReclamDivNet ,
                SUM(r.`Nb_km`) AS nbKm
            FROM
                report_pilotage_centre r
                    INNER JOIN
                depot ON r.depot = depot.code
            WHERE depot.id = $depot
            AND r.date_distrib >= '$dateMin'
            AND r.date_distrib <= '$dateMax'
            AND depot.id IN(" . implode(',', $sDepotId) . ")
            AND (r.setToDelete <> 1 OR r.setToDelete IS NULL)
            ";
        if ($flux)
            $q .= "AND r.flux = $flux
            GROUP BY r.Code_Tournee";
        else
            $q .= "GROUP BY r.Code_Tournee";


        return $this->_em->getConnection()->fetchAll($q);
    }

    /**
     * Méthode de marquage des enregistrements qui devront être supprimés
     * @param object $oDateDebut La date de début de la période à prendre en compte
     * @param object $oDateCourante La date de fin de la période à prendre en compte
     */
    public function setToDelete($oDateDebut, $oDateCourante) {
        $connection = $this->getEntityManager()->getConnection();
        $r = "
            UPDATE report_pilotage_centre
            SET  setToDelete = 1
            WHERE report_pilotage_centre.date_distrib BETWEEN  '" . $oDateDebut->format("Y-m-d") . "' AND  '" . $oDateCourante->format("Y-m-d") . "'
               ;";
        $connection->executeQuery($r);
    }

    /**
     * Méthode d'insertion des données de reporting
     * @param array $aRecapResults Le tableau contenant les enregistrements à insérer
     */
    public function insertDataReporting($aRecapResults) {
        
        if (empty($aRecapResults)){
            return false;
        }
        
        $sInsert = 'VALUES ';
        
        $c = 1;
        $iArrayLen = count($aRecapResults);
        foreach ($aRecapResults as $row){
            $sInsert.= '("'.implode('","',$row).'")';
            if ( $c < $iArrayLen){
                $sInsert .= ',';
            }
            $c++;
        }
//        var_dump($sInsert);exit;
        
        $r = "
            INSERT INTO report_pilotage_centre (Nb_client_Abo, Nb_Ex_Abo, Nb_Diff, Nb_clients_DIV, Nb_Ex_DIV, Nb_ex_en_supplements,
                                                Nb_adresses, Etalon, Nb_Heures, Nb_km, nombre_reclam_brut, nombre_reclam_net,
                                                nombre_reclam_Div_Brut, nombre_reclam_Div_Net, code_tournee, depot, date_distrib,
                                                flux)
            $sInsert
               ; ";

        $this->_em->getConnection()->prepare($r)->execute();
    }

    /**
     * Méthode de suppression des enregistrements ayant été marqués pour la suppression
     */
    public function deleteDataReporting() {
        $connection = $this->getEntityManager()->getConnection();
        $r = "
            DELETE FROM report_pilotage_centre
            WHERE setToDelete = 1
                ;";
        $connection->executeQuery($r);
    }

}
