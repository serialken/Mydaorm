{% set dateSplit = date_tournee|raw|split('/') %}
{% set dateFormatEn = dateSplit[2]~'-'~dateSplit[1]~'-'~dateSplit[0] %}
<script>
    // Mise à jour des variables de portée globale
    flux_selectionne = {{flux_id}};
    routesIndexes = [];
    date_selectionnee = '{{date_tournee|raw}}'; 
    dateFormatEn = '{{dateFormatEn}}';    
    depot_id = {{depot_id}}; // Variable contenant l'ID du dépot concerné
    tournees_vides = []; // Tableau contenant la liste des tournées vides
    var tmpTournee = '';
    var tmpPointLivraison = '';
    
    function init() {
        OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
            defaultHandlerOptions: {
                'single': true,
                'double': false,
                'pixelTolerance': 0,
                'stopSingle': false,
                'stopDouble': false
            },
            initialize: function(options) {
                this.handlerOptions = OpenLayers.Util.extend({},
                        this.defaultHandlerOptions);
                OpenLayers.Control.prototype.initialize.apply(this, arguments);
                this.handler = new OpenLayers.Handler.Click(this, {
                    //'dblclick' : this.trigger,
                    'click': this.trigger
                }, this.handlerOptions);
            },
            trigger: function(e) {
                var map = GCUI.getMap('map');
                var lonlat = map.getLonLatFromPixel(e.xy);
                lonlat.transform(new OpenLayers.Projection("EPSG:27572"), new OpenLayers.Projection("EPSG:4326"));
                updatePointCoords(lonlat.lon, lonlat.lat, '{{web_files_root_dir | raw}}images/carto/marker_pinpoint.png');
            }

        });
        var options = {};
    {#        var options = {
                server: 'http://geoweb.geoconcept.com/geoweb-admin/maps',
                mapName: 'integrationiris',
                tab: 'Server2'
            };#}

                    var options = {
                        server: 'http://{{web_geoc_server_ip_port}}/geoweb-easy/maps',
                        mapName: 'navteq_maps_for_geoconcept_Q412_IDF_OISE_c',
                        tab: 'Server',
                        showSlider: true,
                        projection: new OpenLayers.Projection("EPSG:27572"),
                        displayProjection: new OpenLayers.Projection("EPSG:4326")
                                ////                                    maxExtent: new OpenLayers.Bounds.fromString("-180,-90,180,90"),
                                //                //                    restrictedExtent: new OpenLayers.Bounds.fromString("-180,-90,180,90"),
                    };

                    var map = new GCUI.Map('map', options);
                    map.onEvent("load", onMapLoaded);
                    
                    map.pinPointURL = '{{web_files_root_dir | raw}}images/carto/marker_pinpoint.png'; // Ajout de l'icone de punaise
                    
{#                    console.log(map);#}
                }
                function onMapLoaded() {
                    var map = GCUI.getMap('map');
                    // Création de la couche des marqueurs
                    var markers = new OpenLayers.Layer.Markers("Markers");

                    var iNumberAbonne = 0;
                    var aFeature = new Array();
    {% if htcJsonTbl | length > 0 %}    	
        {% for json in htcJsonTbl %}
                    var count = 0;

                featurecollection_{{loop.index}} = {{ json | raw }};
                        var tmp = featurecollection_{{loop.index}}.features;
                iNumberAbonne += tmp.length;
                // Enregistrement de la tournée dans le tableau des groupes de points
                var tourneeCode = featurecollection_{{loop.index}}.properties.tCode;
                groupesPointsTbl[tourneeCode] = {};

                // Affichage des informations de la tournée
                displayTourneeDatas(featurecollection_{{loop.index}}.properties, {{loop.index0}});
               
                {% endfor %}
                date_YYYYMMDD = featurecollection_1.properties.tDate;
                        var geojson_format = new OpenLayers.Format.GeoJSON({});

            {% for json in htcJsonTbl %}
                    // Création d'un tableau de points pour nourrir les étapes de la route
                    var pointsGeoJson_{{loop.index}} = [];
                    for (oFeature in featurecollection_{{loop.index}}.features) {
                        var point = featurecollection_{{loop.index}}.features[oFeature];
                        if (point.properties.dateDistrib == dateFormatEn)
                          pointsGeoJson_{{loop.index}}.push(point);
                    }

            {% endfor %}

                    var vector_layer = new OpenLayers.Layer.Vector("vector", {
                        projection: map.displayProjection,
                        preFeatureInsert: function(feature) {
                            feature.geometry.transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:27572"));

                            // Changement de l'affichage du point selon son type
                            if (feature.attributes.aType) {
                                // Création du marqueur
                                var size = new OpenLayers.Size(16, 16);
                                var offset = new OpenLayers.Pixel(-(size.w / 2), -size.h);

                                // Test pour savoir si le point a déjà été référencé
                                var displayPoint = false;
                                // On ne prend en compte que les points à livrer pour cette tournée
                                if (feature.attributes.dateDistrib == dateFormatEn){
                                   displayPoint = true;
                                  
                                  if (groupesPointsTbl[feature.attributes.aTourneeCode].hasOwnProperty(feature.attributes.aPointLivraisonId)) {
                                      groupesPointsTbl[feature.attributes.aTourneeCode][feature.attributes.aPointLivraisonId].push(feature);
                                      displayPoint = false;
                                  }
                                  else {
                                      groupesPointsTbl[feature.attributes.aTourneeCode][feature.attributes.aPointLivraisonId] = [feature];
                                  }
                                }


                                // Style du point à afficher
                                var style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);
                                style.fillColor = feature.attributes.aPointColor;
                                style.fillOpacity = 1;
                                style.strokeColor = feature.attributes.tColor;
                                style.strokeOpacity = 1;
                                style.cursor = 'pointer';
                                
                                $('.btn-show').click(function() {
                                    {#if(tmpTournee != feature.attributes.aTourneeCode){
                                      tmpTournee = feature.attributes.aTourneeCode;
                                      count = 0;
                                    }
                                    if(feature.attributes.aPointLivraisonId == tmpPointLivraison)
                                      style.label = '';
                                    else {
                                      style.label = String(++count);
                                      feature.attributes.aPointLivraisonId == tmpPointLivraison;
                                    }#}
                                    style.label = feature.attributes.aOrdreClient;
                                    
                                    aFeature.push(feature.attributes)
                                    if (aFeature.length == iNumberAbonne) {
                                        vector_layer.redraw(true);
                                        aFeature = [];
                                    }
                                    // Effet toggle
                                    $(this).attr('disabled','disabled');
                                    $('.btn-hide').removeAttr('disabled');
                                    
                                });
                                $('.btn-hide').click(function() {
                                    style.label = '';
                                    aFeature.push(feature.attributes)
                                    if (aFeature.length == iNumberAbonne) {
                                        vector_layer.redraw(true);
                                        aFeature = [];
                                    }
                                    
                                    // Effet toggle
                                    $(this).attr('disabled','disabled');
                                    $('.btn-show').removeAttr('disabled');
                                });

                                switch (feature.attributes.aType) {
                                    case 'abo':
                                        var icon = new OpenLayers.Icon('{{ web_files_root_dir|raw }}images/carto/marker_circle_' + feature.attributes.aTourneeNumber + '.png', size, offset);
                                        style.externalGraphic = '{{ web_files_root_dir|raw }}images/carto/marker_circle_' + feature.attributes.aTourneeNumber + '.png';
                                        icon.setOpacity(0);
                                        break;
                                    case 'l2v':
                                        var icon = new OpenLayers.Icon('{{ web_files_root_dir|raw }}images/carto/marker_triangle_' + feature.attributes.aTourneeNumber + '.png', size, offset);
                                        style.externalGraphic = '{{ web_files_root_dir|raw }}images/carto/marker_triangle_' + feature.attributes.aTourneeNumber + '.png';
                                        icon.setOpacity(0);
                                        break;
                                    case 'reperage':
                                        var icon = new OpenLayers.Icon('{{ web_files_root_dir|raw }}images/carto/marker_target_' + feature.attributes.aTourneeNumber + '.png', size, offset);
                                        style.externalGraphic = '{{ web_files_root_dir|raw }}images/carto/marker_target_' + feature.attributes.aTourneeNumber + '.png';
                                        icon.setOpacity(0);
                                        break;
                                    case 'depart':
                                        var icon = new OpenLayers.Icon('{{ web_files_root_dir|raw }}images/carto/marker_start_' + feature.attributes.aTourneeNumber + '.png', size, offset);
                                        style.externalGraphic = '{{ web_files_root_dir|raw }}images/carto/marker_start_' + feature.attributes.aTourneeNumber + '.png';
                                        icon.setOpacity(0);
                                        break;
                                }

                                var lonlat = new OpenLayers.LonLat(feature.geometry.x, feature.geometry.y);
                                var marker = new OpenLayers.Marker(lonlat, icon);

                                feature.style = style;

                                // Le point doit il être afficher ?
                                if (displayPoint) {
                                    marker.testVal = 'ok';
                                    markers.addMarker(marker);
                                }
                            }
                        }
                    });


            {% for json in htcJsonTbl %}
                    vector_layer.addFeatures(geojson_format.read(featurecollection_{{loop.index}}));
            {% endfor %}

                    map.addLayer(vector_layer);

                    var selectFeature = new OpenLayers.Control.SelectFeature(vector_layer);
                    map.addControl(selectFeature);
                    selectFeature.activate();
                    
                    coucheControl = selectFeature; // Permet de récupérer une référence à cette couche de la carte

                    vector_layer.events.on({
                        'featureselected': function(feature) {
                            var markObj = feature.feature;
                            displayP2LDatas(markObj, '{{web_files_root_dir|raw}}images');
                        },
                        'featureunselected': function(feature) {
                            //hide message
                        }
                    });

            {% for json in htcJsonTbl %}

                    var routeLayer_{{loop.index}} = new OpenLayers.Layer.Vector('routeLayer{{loop.index}}',
                            OpenLayers.Util.extend(OpenLayers.Feature.Vector.style, {
                                'default': {
                                    strokeWidth: 0,
                                    strokeColor: featurecollection_{{loop.index}}.properties.tColor
                                },
                                'select': {
                                    strokeWidth: 0,
                                    strokeColor: featurecollection_{{loop.index}}.properties.tColor
                                }
                            }));
                    var currentXY = null;

                    map.events.register('mousemove', null, function(evt) {
                        currentXY = evt.xy;
                    });

                    map.addLayer(routeLayer_{{loop.index}});
                    var route_{{loop.index}} = new GCUI.Control.Route({
                        autoActivate: true,
                        layer: routeLayer_{{loop.index}}
                    });
                    map.addControl(route_{{loop.index}});

                    // Récupération des étapes intermédiaires dans un tableau
                    var etapesInter_{{loop.index}} = [];
                    if (pointsGeoJson_{{loop.index}}.length > 2) {
                        for (var etape in pointsGeoJson_{{loop.index}}) {
                            if (etape != 0 && etape != (pointsGeoJson_{{loop.index}} - 1)) {
                                if (typeof pointsGeoJson_{{loop.index}}[etape].geometry !== 'undefined') {
                                    etapesInter_{{loop.index}}.push(new OpenLayers.LonLat(pointsGeoJson_{{loop.index}}[etape].geometry.coordinates));
                                }
                            }
                        }
                    }
                    
                    route_{{loop.index}}.route({
                        loopIndex: {{loop.index}},
                        origin: new OpenLayers.LonLat(pointsGeoJson_{{loop.index}}[0].geometry.coordinates), // 1ère étape de la route
                        destination: new OpenLayers.LonLat(pointsGeoJson_{{loop.index}}[pointsGeoJson_{{loop.index}}.length - 1].geometry.coordinates), // Dernière étape de la route
                        waypoints: etapesInter_{{loop.index}},
                        callback: function(resp, options) {
                           var features ;
                           features = this.displayRoute(resp); // this == the route control

                           // Correction du bug qui occasionait un retour de l'objet "route" avec plusieurs routes de couleurs différentes (superposition des tracés) #1001
                           // Ajout de l'id de la route au tableau global
                           routesIndexes.push(this.id);
                            var routeIndex = routesIndexes.indexOf(this.id);
                            var routeBackUp = this.routes[routeIndex];
                            this.routes = [routeBackUp];
                        },
                    });
                    
                    
            {% endfor %}
            {% endif %}


                    // Permet de centrer la carte sur la zone d'intéret
                    var newBound = markers.getDataExtent();
                    map.zoomToExtent(newBound);

                    // Ajoute les controles à la carte
                    map.addControl(new GCUI.Control.ScaleSlider());
{#                    console.log(groupesPointsTbl);#}
                {% if typeAction == 'nouveaupoint' %}
                        // Ajoute la gestion du click pour l'obtention des coordonnées
                        clicNewMarker = new OpenLayers.Control.Click();
                        map.addControl(clicNewMarker);

                        // Ajout de la couche contenant le marqueur du point désigné sur la carte
                        map.addLayer(newMarkerLayer);
                {% endif %}


                {#            console.log(map);#}
                    }
                    function displayRouteSheet(route) {
                        var legs = route.legs;
                        var routeSheet = '<table>';
                        for (var i = 0; i < legs.length; i++) {
                            var leg = legs[i];
                            var steps = leg.steps;
                            for (var j = 0; j < steps.length; j++) {
                                var step = steps[j];
                                step.speed = Math.round((3600 * step.distance)
                                        / (1000 * step.duration));
                                step.distance = step.distance < 1000
                                        ? step.distance + ' m'
                                        : (step.distance / 1000).toFixed(1) + ' km';
                                step.duration = step.duration < 60 ? step.duration
                                        + ' s' : Math.round(step.duration / 60)
                                        + ' mn';
                                var bounds = new OpenLayers.Bounds();
                                for (var k = 0; k < step.points.length; k++) {
                                    var pt = step.points[k].split(',');
                                    bounds.extendXY(parseFloat(pt[0]), parseFloat(pt[1]));
                                }
                                routeSheet += '<tr' + ((j % 2 == 0) ? ' class="odd"' : "") + ' onclick="zoomOn(' + bounds.bottom + ',' + bounds.left + ',' + bounds.top + ',' + bounds.right + ')"><td class="tdNav"><span class="nav' + step.navInstruction + '"></span></td><td class="tdName">' + step.name + '</td><td class="tdDist">' + step.distance + '</td><td class="tdDur">' + step.duration + '</td><td class="tdSpeed">' + step.speed + ' km/h</td></tr>';
                            }
                        }
                        //document.getElementById('results').innerHTML = routeSheet + '</table>';
                    }
                    function zoomOn(bottom, left, top, right) {
                        var map = GCUI.getMap('map');
                        map.zoomToExtent(new OpenLayers.Bounds(left, bottom, right, top));                       
                    }

                    /**
                     * Actions lancées au chargement de la page
                     */
                    $(document).ready(function() {
                        // On alimente les sélecteurs d'abonnés
                        var aListeAbo = [];
                        jsonTourneesAffTbl.forEach(function(element){
                            if (element.features.length > 0){
                                element.features.forEach(function(featElem){
                                    aListeAbo.push(featElem.properties);
                                });
                            }
                        });
                        
{#                        console.log('test',jsonTourneesAffTbl);#}
{#                        console.log('liste des abos+',aListeAbo);#}
                        
                        // fonction de dédoublonnage de la liste pour les numéros abonnés
                        var uniqNumFunc = function(aList){
                            var uniqVal = [];
                            if (aList.length > 0){
                                aList.forEach(function(option, index){
{#                                    if (uniqVal.indexOf(option.aId) === -1){#}
                                    if (uniqVal.indexOf(option.aUniqueId) === -1){
                                        uniqVal.push(option.aId);
                                    }
                                    else{
                                        aList.splice(index, 1);
                                    }
                                });
                            }
                        };
                        
                        // fonction de dédoublonnage de la liste pour les noms clients
                        var uniqNameFunc = function(aList){
{#                            console.log('origine: '+aList.length);#}
                            var uniqVal = [];
                            if (aList.length > 0){
                                aList.forEach(function(option, index){
                                    if (uniqVal.indexOf(option.aNomClient) == -1){
                                        uniqVal.push(option.aNomClient);
                                    }
                                    else{
                                        aList.splice(index, 1);
                                    }
                                });
                            }
                            
{#                            console.log('dedup: '+aList.length);#}
                        };
                        
                        // recherche par numéro
                        var abosNumMapSelect = {val: 'aId', label: 'aId'};
                        var abosNumSelectElem = '#searchAboByNum';
                        pushOptionsToElem(abosNumSelectElem, '<option>', aListeAbo, abosNumMapSelect, uniqNumFunc);
                        
                        // recherche par nom
                        var abosNameMapSelect = {val: 'aId', label: 'aNomClient'};
                        var abosNameSelectElem = '#searchAboByName';
                        pushOptionsToElem(abosNameSelectElem, '<option>', aListeAbo, abosNameMapSelect, uniqNameFunc);
                        
                         $('#searchAboByNum').select2().on('change', function(e){
                            // Réinitialisation de l'affichage 
                            $('div#results').hide();
                            $('#searchAboByName').val("");
                            $('#searchAboByName').select2();
                             
                             var sAboNum = $('#searchAboByNum').val();
                             var oAbo = showAbonnePoint({numAbo: sAboNum}, 'info');
                             displaySearchInfo(oAbo); 
                         });
                        
                         $('#searchAboByName').select2().on('change', function(e){
                             // Réinitialisation de l'affichage 
                            $('div#results').hide();
                            $('#searchAboByNum').val("");
                            $('#searchAboByNum').select2();
                             
                             var sAboNum = $('#searchAboByName').val();
                             var oAbo = showAbonnePoint({numAbo: sAboNum}, 'info');
                             displaySearchInfo(oAbo); 
                         });
                         
                        $("#findAboBtn").on('click', function(){
                            $('#amsModalSearch').modal('show');
                        });
                        
                    });
            </script>
            <!-- Ne pas transférer dans carto.css !! -->
            <style>
                #chicken_close{
                    background-image: url("{{web_files_root_dir | raw}}images/carto/fermer_icone.png");
                    cursor: pointer;
                }
            </style>