<?php

namespace Ams\AdresseBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ReparGlobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReparGlobRepository extends EntityRepository {

    public function getCommunesBetweenDate($communeId, $fluxId, $date) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "
                SELECT * from repar_glob rg
                JOIN depot d ON rg.depot_id = d.id
                WHERE rg.commune_id = $communeId
                    AND '$date' BETWEEN rg.date_debut AND rg.date_fin
                    AND rg.flux_id = $fluxId
             ";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }

    public function isExistIntervalDate($depotId, $communeId, $fluxId, $date) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "SELECT CONCAT(fp.vol1, '$sSeparateur' ,fp.vol2) as nom,produit_libelle as nom_produit, qte as nb_ex, CONCAT( num_voie,' ',nom_voie ) as adresse,
                     adr.vol3 as cpt_adresse,CONCAT(adr.cp,' ',adr.ville )  as cp_ville,REPLACE(info_portage,'|',' ') as infoportage,fp.numabo_ext as numero,
                     CONCAT( e.prenom1,' ',e.nom ) as nom_porteur,
                     mtj.code as code_tournee, fp.ordre FROM feuille_portage fp "
                . "JOIN produit p ON p.id = produit_id "
                . "JOIN societe s ON p.societe_id = s.id "
                . "LEFT JOIN modele_tournee_jour mtj ON mtj.id = fp.tournee_jour_id "
                . "LEFT JOIN employe e ON e.id = mtj.employe_id "
                . "LEFT JOIN  abonne_soc asoc ON asoc.numabo_ext = fp.numabo_ext AND asoc.societe_id = s.id "
                . "JOIN adresse adr ON adr.abonne_soc_id = asoc.id AND '$date' BETWEEN adr.date_debut AND adr.date_fin "
                . "RIGHT JOIN etiquette et ON et.abonne_soc_id = asoc.id "
                . "WHERE date_distrib = '$date' "
                . "AND tournee_jour_id ='$tournee' "
                . "AND produit_id IN($product) "
                . "GROUP BY fp.numabo_ext,produit_id "
                . "ORDER BY fp.ordre"
        ;
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }

    /**
     * repartition global 
     * @param type $depotId
     * @return type
     */
    public function getCommunesAvecDepotsId($depotId) {
        $connection = $this->getEntityManager()->getConnection();
        $date = date('Y-m-d');
        $q = "
                SELECT 
                    rg.id,
                    c.insee,
                    if(rg.flux_id=1, 'Nuit', 'Jour') as flux_id,
                    rg.date_fin as rg_date_fin,
                    rg.date_debut as rg_date_debut,
                    c.libelle as commune_libelle,
                    c.cp,
                    d.libelle as depot_libelle 
                FROM repar_glob rg
                JOIN depot d ON rg.depot_id = d.id
                JOIN commune c ON c.id = rg.commune_id
                WHERE rg.depot_id = $depotId
                ORDER BY rg.date_fin DESC
             ";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }

    /**
     * mettre une date de fin a toute les rapar_global
     * de la commune  quelque soit le flux
     * @param int $socId l'ID de la societe
     * @param int $communeId L'ID de la commune
     * @return mixed Le tableau d'enregistrements
     */
    public function UpdateReparGlobal($listInsee, $date_fin, $userId) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "  
            UPDATE 
                repar_glob set date_fin = '".$date_fin."', 
                date_modif = NOW(),
                utilisateur_id = $userId
            WHERE commune_id IN  (".$listInsee.")
            AND date_fin >  NOW()
        ";

       return  $connection->executeQuery($q);
        
    }
    

      /**
     * Insertion d'une exception societe
     * @param array $aCommuneId
     * @param int $depotId
     * @param int $fluxId
     * @param int $userId
     * @param date $dateDebut
     * @param date $date_fin
     */
    
    public function insertReparGlob($aCommuneId,$depotId,$fluxId,$userId,$dateDebut, $date_fin) { 
 
        $value = '';
        foreach($aCommuneId as $key=>$commune){
            $value.="($fluxId,$commune,$depotId,$userId, NOW(), '$dateDebut',' $date_fin')";
            if($key + 1 < count($aCommuneId))
                $value.=",";
        }
            
        if($value != ''){
            $q = "
                INSERT INTO repar_glob
                    (flux_id,commune_id,depot_id,utilisateur_id,date_modif,date_debut,date_fin)
                VALUES
                    $value
            ";
            $this->_em->getConnection()->prepare($q)->execute();
            
            echo $q;
        }
    }



    /**
     * Retourne les informations de la répartition pour un flux, une date et un département donnés
     * @param int $iDpt Le numéro du département
     * @param int $iFluxId L'ID du flux concerné
     * @param string $sDate La date optionnelle
     * @return array Le jeu de résultats
     */
    public function getRules($iDpt, $iFluxId, $sDate = NULL) {
        $connection = $this->getEntityManager()->getConnection();

        // Si la date n'est pas renseignée, la date courante est utilisée
        if (is_null($sDate)) {
            $sDateDefault = 'NOW()';
            $sReqDate = $sDateDefault;
        } else {
            $sReqDate = "'" . $sDate . "'";
        }

        $q = "SELECT rg.*, com.libelle AS ville, com.insee, com.cp, d.libelle AS depot_nom, d.adresse, d.code FROM repar_glob AS rg
	JOIN commune AS com ON com.id = rg.commune_id
	JOIN depot AS d ON d.id = rg.depot_id
	WHERE
		rg.flux_id = $iFluxId
		AND
		LEFT(com.cp,2) = $iDpt
		AND $sReqDate BETWEEN rg.date_debut AND rg.date_fin
		ORDER BY depot_id ASC, ville ASC
		";

        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }

    /**
     * Retourne un tableau qui recapitule par societe les produits,commune,flux et dépôt associé.
     * @return type array
     */
    public function getSchemaReparGlobal($societyId) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "
                SELECT 
                    flux_id, commune_id, depot_id, societe_id, produit_id, date_debut, date_fin,insee,libelle,produit_libelle,depot_libelle, MAX(poids) AS poids
                FROM (

                    (SELECT 
                        p.flux_id, rp.commune_id,rp.depot_id,p.societe_id,p.id as produit_id,rp.date_debut,rp.date_fin,c.insee,c.libelle,p.libelle as produit_libelle,d.libelle as depot_libelle, 3 AS poids 
                    FROM repar_prod rp	
                        JOIN produit p ON p.id = rp.produit_id AND  NOW() >= p.date_debut AND (p.date_fin is NULL OR NOW() <= p.date_fin )
                        JOIN commune c ON c.id = rp.commune_id
                        JOIN depot d ON d.id = rp.depot_id
                    WHERE societe_id = $societyId)

                    UNION 

                    (SELECT p.flux_id, repar.commune_id,repar.depot_id,repar.societe_id,p.id as produit_id,repar.date_debut,repar.date_fin,c.insee,c.libelle,p.libelle as produit_libelle,d.libelle as depot_libelle, 2 AS poids 
                        FROM produit p 
                            JOIN repar_soc repar ON p.societe_id=repar.societe_id AND  NOW() >= p.date_debut AND (p.date_fin is NULL OR NOW() <= p.date_fin )
                            JOIN commune c ON c.id = repar.commune_id
                            JOIN depot d ON d.id = repar.depot_id
                    WHERE repar.societe_id = $societyId)

                    UNION 

                    (SELECT p.flux_id, repar.commune_id,repar.depot_id,p.societe_id,p.id as produit_id,repar.date_debut,repar.date_fin,c.insee,c.libelle,p.libelle as produit_libelle,d.libelle as depot_libelle, 1 AS poids 
                        FROM societe s 
                            JOIN produit p ON s.id = p.societe_id AND  NOW() >= p.date_debut AND (p.date_fin is NULL OR NOW() <= p.date_fin )
                            JOIN repar_glob repar ON 1=1  AND p.flux_id=repar.flux_id AND now() BETWEEN repar.date_debut AND repar.date_fin
                            JOIN commune c ON c.id = repar.commune_id
                            JOIN depot d ON d.id = repar.depot_id
                    WHERE p.societe_id = $societyId)

                ) as table_tmp
                GROUP BY flux_id, commune_id,produit_id
                ORDER by produit_id,depot_id,flux_id
             ";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }

    public function getExceptions($zipCode, $socId, $fluxId) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "
             SELECT 
                rg.*, c.libelle as ville, c.insee, c.cp,
                d.id AS depot_id, d.libelle AS depot_nom, d.adresse
            FROM
                repar_glob rg
            JOIN commune c ON c.id = rg.commune_id
            JOIN depot d ON d.id = rg.depot_id
            WHERE ";

        if ($fluxId > 0) {
            $q .= " rg.flux_id = $fluxId 
                AND ";
        }
        $q .= " LEFT(c.cp,2) = $zipCode";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }

}
