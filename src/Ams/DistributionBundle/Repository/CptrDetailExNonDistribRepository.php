<?php

namespace Ams\DistributionBundle\Repository;

use Ams\SilogBundle\Repository\GlobalRepository;

/**
 * CptrDetailExNonDistribRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CptrDetailExNonDistribRepository extends GlobalRepository
{
    public function getCountAbonneNonLivre($cptrId){
        $sql = "
            SELECT SUM(nb_abonne_non_livre) as somme FROM cptr_detail_ex_non_distrib
            WHERE cptr_distrib_id = $cptrId
            ";
        return $this->_em->getConnection()->fetchAll($sql);
    }
    
    public function getCountDiffNonLivre($cptrId){
        $sql = "
            SELECT SUM(nb_diff_non_livre) as somme FROM cptr_detail_ex_non_distrib
            WHERE cptr_distrib_id = $cptrId
            ";
        return $this->_em->getConnection()->fetchAll($sql);
    }
    /**
     * [getProductId description]
     * @param  [type] $product [description]
     * @param  [type] $societe [description]
     * @return [type]          [description]
     */
    public function getProductId($product, $societe) {
        $sql = "SELECT id
                FROM produit p
                WHERE 
                    p.libelle = '".$product."'
                AND
                    p.soc_code_ext = '".$societe."'";
        
        return $this->_em->getConnection()->fetchAll($sql);
    }

    /**
     * [getListeProduitNonLivre description]
     * @param  [type] $date       [description]
     * @param  [type] $tournee_id [description]
     * @param  [type] $depot_id   [description]
     * @param  [type] $id         [description]
     * @return [type]             [description]
     */
    public function getListeProduitNonLivre($date, $tournee_id, $depot_id,$id)
    {
        $sql = "SELECT distinct s.id as produit_id,/*a remplacer produit_id par societe_id ici et dans le twig*/
                        s.code as code,
                        s.libelle as nom_produit,
                        c.libelle as ville, 
                        c.id as ville_id,
                        sum(qte) as qte,
                        img.path as img_path,
                        dcd.nb_ex_abo,
                        dcd.nb_ex_diff,
                        dcd.nb_abonne_non_livre,
                        dcd.nb_diff_non_livre,
                        cd.id as id_compte_rendu
                FROM client_a_servir_logist as cs
                    INNER JOIN societe as s on s.id = cs.societe_id AND cs.date_distrib='".$date."' 
                    /*LEFT JOIN produit as p on p.id = cs.produit_id AND cs.date_distrib='".$date."' */

                    INNER JOIN modele_tournee_jour as mtj on mtj.id = cs.tournee_jour_id 
                    INNER JOIN commune as c on c.id = cs.commune_id 
                    LEFT JOIN fichier as img on s.image_id = img.id 
                    LEFT JOIN cptr_detail_ex_non_distrib dcd ON s.id = dcd.societe_id AND dcd.date_cpt_rendu = '".$date."'  AND dcd.cptr_distrib_id = '".$id."' and cs.commune_id = dcd.commune_id
                    LEFT JOIN cptr_distribution cd ON cd.id = dcd.cptr_distrib_id AND cd.date_cpt_rendu ='".$date."' 
                    INNER JOIN depot as d on cs.depot_id = d.id 
                    WHERE ('".$date."'  BETWEEN s.date_debut AND s.date_fin OR ('".$date."' > s.date_debut AND s.date_fin IS NULL))
                    AND cs.date_distrib='".$date."' 
                    AND cs.depot_id = $depot_id ";
                if(!empty($tournee_id)){
                    $sql .= " AND cs.tournee_jour_id = $tournee_id";
                }

              $sql .= " group by s.code,c.insee order by s.libelle ";
              

        return $this->_em->getConnection()->fetchAll($sql);
    }
    
    /**
     * [isNew description]
     * @param  [type]  $param   [description]
     * @param  [type]  $id_cptr [description]
     * @param  [type]  $date    [description]
     * @return boolean          [description]
     */
    public function isNew($param, $id_cptr, $date){
        $sql = "SELECT * 
                FROM 
                    cptr_detail_ex_non_distrib
                WHERE 
                    date_cpt_rendu = '".$date."'
                AND 
                    societe_id = '".$param[$param['ids'].'_produit']."'
                AND 
                    cptr_distrib_id = '".$id_cptr."'
                AND commune_id = '".$param[$param['ids'].'_ville_id']."'";

        return $this->_em->getConnection()->fetchAll($sql);
    }
    
    /**
     * [insert description]
     * @param  [type] $param   [description]
     * @param  [type] $id_cptr [description]
     * @param  [type] $date    [description]
     * @return [type]          [description]
     */
    public function insert($param, $id_cptr, $date) {
  
        try {
            $sql = "INSERT INTO cptr_detail_ex_non_distrib 
                        (societe_id, 
                        nb_ex_abo, 
                        nb_ex_diff,
                        nb_abonne_non_livre,
                        nb_diff_non_livre,
                        quantite_initiale,
                        cptr_distrib_id,
                        date_cpt_rendu,
                        commune_id) 
                    VALUES 
                        ('".$param[$param['ids'].'_produit']."',  
                        '".$param[$param['ids'].'_nb_ex_abo']."', 
                        '".$param[$param['ids'].'_nb_ex_diff']."', 
                        '".$param[$param['ids'].'_nb_ab_non_livre']."', 
                        '".$param[$param['ids'].'_nb_diff_non_livre']."', 
                        '".$param[$param['ids'].'_qte']."', 
                        '".$id_cptr."', 
                        '".$date."',
                        '".$param[$param['ids'].'_ville_id']."' )";
       
            $this->_em->getConnection()->prepare($sql)->execute();
            $id = $this->_em->getConnection()->lastInsertId();
            $this->updateCptrDistribution( $id_cptr );
        } catch (DBALException $ex) {
            return $this->sqlField->sqlError($msg, $msgException, $ex, "L'activite doit être unique.","UNIQUE","");
        }
        return true;
    }
    
    /**
     * [update description]
     * @param  [type] $param   [description]
     * @param  [type] $id_cptr [description]
     * @param  [type] $id      [description]
     * @return [type]          [description]
     */
    public function update($param,$id_cptr, $id) {  
        try {
            $sql = "UPDATE cptr_detail_ex_non_distrib SET 
                nb_ex_abo = '" . $param[$param['ids'].'_nb_ex_abo'] . "',
                nb_ex_diff = '" . $param[$param['ids'].'_nb_ex_diff'] . "',
                nb_diff_non_livre ='". $param[$param['ids'].'_nb_ex_diff'] ."',
                nb_abonne_non_livre='". $param[$param['ids'].'_nb_ab_non_livre'] ."'
                WHERE id = " . $id;
         
            $this->_em->getConnection()->prepare($sql)->execute();
            $this->updateCptrDistribution( $id_cptr );
            
        } catch (DBALException $ex) {
            return $this->sqlField->sqlError($msg, $msgException, $ex, "L'activite doit être unique.","UNIQUE","");
        }


        return true;
    }


    /**
     * [updateCptrDistribution description]
     * @param  [type] $id [description]
     * @return [type]     [description]
     */
    public function updateCptrDistribution($id) {
            $sql1 = "select sum(nb_ex_abo) as nb_ex_abo,sum(nb_ex_diff) as  nb_ex_diff  from cptr_detail_ex_non_distrib where cptr_distrib_id=$id";
            $result  =  $this->_em->getConnection()->fetchAll($sql1);
         
            $sql = "UPDATE cptr_distribution SET 
                nb_ex_abo =  '".$result[0]['nb_ex_abo']."',
                nb_ex_diff =  '".$result[0]['nb_ex_diff']."'
                WHERE id = '".$id."'";  
          
            $this->_em->getConnection()->prepare($sql)->execute();
           // var_dump( $this->_em->getConnection()->prepare($sql)->execute());die('p');
         return true;
    }
    
    /**
     * Recuperation des compte-rendu de distribution a exporter
     * 
     * Ordre d'importance d'anomalie : Retard - Non livraison - RAS puis non renseigne.
     * Ordre d'importance d'incident : Selon l'importance des abonnes impactes par l'anomalie
     * 
     * On n'exporte pas les "RAS" et "NON renseignes"
     * 
     * @param array $aDate
     * @param string $sFluxCode
     * @param string $sSoc
     * @return type
     */
    public function getCptrDistributionToExport($aDate, $sFluxCode = 'N', $sSoc='tout'){
/*
39|2014/09/26|60006|EC|1|1|6||2 ||14
39|2014/09/26|60006|EC|1|0| ||21||14

   // 0	-> ID soc. Distrib.
   // 1	-> Date de distribution 
   // 2	-> Code INSEE
   // 3	-> Code societe PQR
   // 4	-> ID Flux
   // 5	-> Code anomalie
   // 6	-> Code incident
   // 7	-> Commentaire
   // 8	-> Nb clients impactes
   // 9	-> Heure fin tournee
   // 10	-> ID depot PQR
 * 
 * 
 *  // Code anomalie =>     0 : RAS     1 : Retard     2 : Non livraison [Ordre d'importance d'anomalie : Retard - Non livraison - RAS puis non renseigne. ]
*/
         
        $sql    = " 	
                    SELECT
                        date_distrib
                        , code_insee
                        , code_societe
                        , flux_id
                        , code_anomalie
                        , code_incident
                        , cmt_incident_ab
                        , SUM(nb_abonnes_impactes) AS nb_abonnes_impactes
                        , heure_fin_tournee
                        , depot_code
                        , SUM(nb_abos) AS nb_abos
                        , importance
                    FROM
                    (
                        SELECT /* Cette sous-requete permet de mettre en valeur les informations a envoyer a Jade si plusieurs incidents ou anomalies existent pour une seule ville [Ordre d'importance d'anomalie : Retard - Non livraison - RAS puis non renseigne. ] */
                            date_distrib
                            , code_insee
                            , code_societe
                            , flux_id
                            , code_anomalie
                            , code_incident
                            , cmt_incident_ab
                            , nb_abonnes_impactes
                            , nb_abos
                            , heure_fin_tournee
                            , depot_code
                            , importance
                        FROM
                        (
                            /** Cas CR NON renseigne **/
                            SELECT
                                DATE_FORMAT(csl1.date_distrib,'%Y/%m/%d') AS date_distrib
                                , csl1.tournee_jour_id
                                , c1.insee AS code_insee
                                , s1.code AS code_societe
                                , gt1.flux_id AS flux_id
                                , '0' AS code_anomalie 
                                , '0' AS code_incident
                                , '' AS cmt_incident_ab
                                , 0 AS nb_abonne_non_livre
                                , DATE_FORMAT (cd1.heure_fin_tournee, '%H:%i') AS heure_fin_tournee
                                , d1.code AS depot_code
                                , COUNT(DISTINCT csl1.abonne_soc_id) AS nb_abonnes_impactes
                                , csl1.commune_id, COUNT(DISTINCT csl1.abonne_soc_id) AS nb_abos
                                , 1 AS importance /* RAS - car non defini */
                            FROM
                                client_a_servir_logist csl1
                                INNER JOIN modele_tournee_jour mtj1 ON mtj1.id = csl1.tournee_jour_id 
                                INNER JOIN modele_tournee mt1 ON mtj1.tournee_id = mt1.id
                                INNER JOIN groupe_tournee gt1 ON mt1.groupe_id = gt1.id
                                INNER JOIN ref_flux f ON gt1.flux_id = f.id AND f.code = '".$sFluxCode."'
                                INNER JOIN depot d1 ON csl1.depot_id = d1.id
                                INNER JOIN commune c1 ON csl1.commune_id = c1.id
                                INNER JOIN societe s1 ON csl1.societe_id = s1.id ".(($sSoc!="tout") ? " AND s1.code IN ('".str_replace(",", "', '", str_replace(' ', '', $sSoc))."')" : "")." 
                                LEFT JOIN cptr_distribution cd1 ON cd1.date_cpt_rendu = csl1.date_distrib AND cd1.tournee_id = csl1.tournee_jour_id  
                            WHERE
                                csl1.date_distrib IN ('".implode("', '",$aDate)."')
                                AND cd1.id IS NULL /* cpte-rendu non renseigne */
                            GROUP BY
                                DATE_FORMAT(csl1.date_distrib,'%Y/%m/%d')
                                , csl1.tournee_jour_id
                                , c1.insee
                                , s1.code

                            /** Cas CR renseigne **/
                            UNION
                            SELECT
                                DATE_FORMAT(csl1.date_distrib,'%Y/%m/%d') AS date_distrib
                                , csl1.tournee_jour_id
                                , c1.insee AS code_insee
                                , s1.code AS code_societe
                                , gt1.flux_id AS flux_id
                                , IF(ta1.code IS NULL,'0',ta1.code) AS code_anomalie 
                                , IF(tyInci1.code IS NULL,'0',tyInci1.code) AS code_incident
                                , cd1.cmt_incident_ab
                                , IF(cptdd1.nb_abonne_non_livre IS NULL,0,cptdd1.nb_abonne_non_livre) AS nb_abonne_non_livre
                                , DATE_FORMAT (cd1.heure_fin_tournee, '%H:%i') AS heure_fin_tournee
                                , d1.code AS depot_code
                                , IF( ta1.code IS NOT NULL AND ta1.code = '2' /*Non Livraison*/, IF(cptdd1.nb_abonne_non_livre IS NULL, 0, cptdd1.nb_abonne_non_livre), COUNT(DISTINCT csl1.abonne_soc_id) ) AS nb_abonnes_impactes
                                , csl1.commune_id, COUNT(DISTINCT csl1.abonne_soc_id) AS nb_abos
                                , CASE
                                        WHEN ta1.code IS NOT NULL AND ta1.code = '1' THEN 9 /* Le retard est l'anomalie la plus importante */
                                        WHEN ta1.code IS NOT NULL AND ta1.code = '2' THEN 7 /* Non livraison */
                                        ELSE 5 /* RAS */
                                END AS importance
                            FROM
                                client_a_servir_logist csl1
                                INNER JOIN modele_tournee_jour mtj1 ON mtj1.id = csl1.tournee_jour_id 
                                INNER JOIN modele_tournee mt1 ON mtj1.tournee_id = mt1.id
                                INNER JOIN groupe_tournee gt1 ON mt1.groupe_id = gt1.id 
                                INNER JOIN ref_flux f ON gt1.flux_id = f.id AND f.code = '".$sFluxCode."'
                                INNER JOIN depot d1 ON csl1.depot_id = d1.id
                                INNER JOIN commune c1 ON csl1.commune_id = c1.id
                                INNER JOIN societe s1 ON csl1.societe_id = s1.id ".(($sSoc!="tout") ? " AND s1.code IN ('".str_replace(",", "', '", str_replace(' ', '', $sSoc))."')" : "")." 
                                INNER JOIN cptr_distribution cd1 ON cd1.date_cpt_rendu = csl1.date_distrib AND cd1.tournee_id = csl1.tournee_jour_id /* cela veut dire que cpte-rendu renseigne*/
                                LEFT JOIN cptr_detail_ex_non_distrib cptdd1 ON cd1.id = cptdd1.cptr_distrib_id AND csl1.societe_id = cptdd1.societe_id AND csl1.commune_id = cptdd1.commune_id
                                LEFT JOIN cptr_type_incident tyInci1 ON tyInci1.id = cd1.type_incident_id AND cptdd1.societe_id IS NOT NULL
                                LEFT JOIN cptr_type_anomalie ta1 ON ta1.id = cd1.type_anomalie_id 
                            WHERE
                                csl1.date_distrib IN ('".implode("', '",$aDate)."')			
                            GROUP BY
                                DATE_FORMAT(csl1.date_distrib,'%Y/%m/%d')
                                , csl1.tournee_jour_id
                                , c1.insee
                                , s1.code
                            ) t
                            WHERE
                                1 = 1
                            ORDER BY
                                date_distrib DESC, code_insee DESC, importance DESC, code_societe DESC, nb_abonnes_impactes DESC
                    ) t2
                    WHERE
                        1 = 1 
                        -- AND code_anomalie NOT IN ('0') /* RAS ou Non renseigne */
                        AND importance NOT IN (1) /* Non renseigne */
                    GROUP BY
                        date_distrib
                        , code_insee
                        , code_societe
                        , flux_id -- A voir si necessaire ou pas
                        , code_anomalie
                    ORDER BY
                        date_distrib
                        , code_insee
                        , code_societe
                        , flux_id -- A voir si necessaire ou pas
                        , code_anomalie                        
                    ";
        
        return $this->_em->getConnection()->fetchAll($sql);
        
    }

}
