<?php

namespace Ams\ExploitationBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Ams\SilogBundle\Controller\GlobalController;
use Symfony\Component\HttpFoundation\Session\Session;
use Ams\ExploitationBundle\Entity\SuiviCommand;

class SuiviCronController extends GlobalController
{
    protected $hoursChoices;
    protected $stateChoices;
    protected $cronLibelleArray;
    
    /**
     * 
     * @param type $key
     * @return string
     */
    protected function getHourParam($key){
        $interval = array();
        switch ($key){
            case "1":
                $interval[0] = "00:00:00";
                $interval[1] = "07:59:59";
                return $interval;
            case "2":
                $interval[0] = "08:00:00";
                $interval[1] = "15:59:59";
                return $interval;
            case "3": 
                $interval[0] = "16:00:00";
                $interval[1] = "23:59:59";
                return $interval;
            default:
                $interval[0] = "00:00:00";
                $interval[1] = "23:59:59";
                return $interval;
        }
    }
    
    /**
     * 
     * @param type $key
     * @param type $list
     * @return string
     */
    protected function getStateParam($key, $list){
        if ($key == "0"){
            return "all";
        }else{
            return $list[$key];
        }
    }
    
    /**
     * 
     * @param type $key
     * @param type $list
     * @return string
     */
    protected function getCronNameParam($key, $list){
        if ($key == "0"){
            return "all";
        }else{
            return $list[$key];
        }
    }
    
    /**
     * 
     * @param Request $request
     * @return Response
     */
    public function listAction(Request $request){
        
         //verifie si on a droit d'acceder à cette page
//        $bVerifAcces = $this->verif_acces();
//        var_dump($bVerifAcces);
//        die();
//        if ($bVerifAcces !== true) {
//            return $bVerifAcces;
//        }
        
//                $this->setDerniere_page();
        
        $session = $request->getSession();
//        $session = $this->get('session');
        $suiviCommandRepo = $this->getDoctrine()->getManager()->getRepository('AmsExploitationBundle:SuiviCommand');
        $suiviCommandLibelle = $suiviCommandRepo->getLibelleCommand();
        $this->cronLibelleArray[0] = "Tous";
        foreach($suiviCommandLibelle as $cronLibelle){
            $this->cronLibelleArray[] = $cronLibelle['libelle_command'];
        }
        $this->hoursChoices = array(
                              0 => "Toutes",
                              1 => "Avant 8h00",
                              2 => "Entre 8h00 et 16h00",
                              3 => "Aprés 16h00"
        );
        
        $this->stateChoices = array(
                                0 => "Tous",
                                1 => "En cours",
                                2 => "OK",
                                3 => "KO"
        );
        
        $form = $this->createFormBuilder()
                ->add('DateCron', 'text', array(
                                                'required' => true,
                                                'label' => 'Date du CRON'
                                                )
                     )
                ->add('Heure', 'choice', array(
                                                'choices' => $this->hoursChoices,
                                                'required' => false,
                                                'empty_value' => false
                                                )
                    )
                ->add('Cron','choice', array(
                                               'label' => 'CRON',
                                               'choices' => $this->cronLibelleArray,
                                               'required' => false,
                                               'empty_value' => false
                                               ) 
                    )
                ->add('Etat', 'choice', array(
                                                'choices' => $this->stateChoices,
                                                'required' => false,
                                                'empty_value' => false
                                                )
                    )
                ->getForm();
        
        // Recuperation de la date du cron
        if ($request->getMethod() == 'POST') {
            $DataInform = $request->request->get('form');
            $dateCron = $DataInform['DateCron'];
            $heures = $DataInform['Heure'];
            $cron = $DataInform['Cron'];
            $etat = $DataInform['Etat'];
        } else {
            $dateCron = date('d/m/Y');
            $heures = "0";
            $cron = "0";
            $etat = "0";
        }
        
        $session->set('SuiviCronDateCron', $dateCron);
        $session->set('SuiviCronHeure', $heures);
        $session->set('SuiviCronCronName', $cron);
        $session->set('SuiviCronNameListe', $this->cronLibelleArray);
        $session->set('SuiviCronEtat', $etat);
        $session->set('SuiviCronEtatListe', $this->stateChoices);
        
        return $this->render('AmsExploitationBundle:SuiviCron:list.html.twig', array(
            'dateCron' => $dateCron,
            'heure' => $heures,
            'cron' => $cron,
            'etat' => $etat,
            'form' => $form->createView(),
        ));
    }
    
    /**
     * 
     * @return Response
     */
    public function gridAction(){
        $em = $this->getDoctrine()->getManager();
        $session = new Session();
        
        $date = $session->get('SuiviCronDateCron');
        $heureKey = $session->get('SuiviCronHeure');
        $cronNameKey = $session->get('SuiviCronCronName');
        $suiviCommandNameList = $session->get('SuiviCronNameListe');
        $etatKey = $session->get('SuiviCronEtat');
        $suiviCommandStateList = $session->get('SuiviCronEtatListe');
        
        $heureParam = $this->getHourParam($heureKey);
        $cronNameParam = $this->getCronNameParam($cronNameKey, $suiviCommandNameList);
        $etatParam = $this->getStateParam($etatKey, $suiviCommandStateList);
        $dateMini = str_replace('/','-',$date);
        $dateParam = date("Y-m-d", strtotime($dateMini));
        
        //Recuperation de la liste de tous les crons pour date en cours
        $suiviCommandDataTmp = $em->getRepository('AmsExploitationBundle:SuiviCommand')->getListSuiviCommand($dateParam, $heureParam, $cronNameParam, $etatParam);
        if(empty($suiviCommandDataTmp)){
            $suiviCommandData = $suiviCommandDataTmp;
        }else{
            foreach ($suiviCommandDataTmp as $tabData) {
                $tabData['log_file'] = basename($tabData['log_file']);
                $suiviCommandData[] = $tabData;
            }
        }
        
        $response = $this->renderView('AmsExploitationBundle:SuiviCron:grid.xml.twig', array(
            'suivi' => $suiviCommandData
        ));

        return new Response($response, 200, array('Content-Type' => 'Application/xml'));
    }
    
    /**
     * 
     * @param Request $request
     * @return Response
     */
    public function downloadAction(Request $request){
        $id = $request->get('cronId');
        $name = $request->get('logName');
        $em = $this->getDoctrine()->getManager();
        $res = $em->getRepository('AmsExploitationBundle:SuiviCommand')->getLogPathById($id);
        $fullPathName = $res[0]['log_file'];
        $response = file_get_contents($fullPathName);
        return new Response ($response, 200, array(
//                                                                            'Content-Type' => 'application/force-download',
                                                                            'Content-Type' => 'text/plain',
                                                                            'Content-Disposition' => 'attachment; filename="'.$name.'"'
        ));
    }
}
